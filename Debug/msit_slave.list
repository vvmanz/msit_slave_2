
msit_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003644  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038b8  080038b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b8  080038b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08003930  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003930  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e4a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001903  00000000  00000000  00026ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00028fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e9  00000000  00000000  00029690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a6f  00000000  00000000  00041079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083254  00000000  00000000  00049ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccd3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  000ccd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003738 	.word	0x08003738

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003738 	.word	0x08003738

0800014c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == SPI_NSS_1_Pin) {
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b10      	cmp	r3, #16
 800015a:	d112      	bne.n	8000182 <HAL_GPIO_EXTI_Callback+0x36>
        if (HAL_GPIO_ReadPin(SPI_NSS_1_GPIO_Port, SPI_NSS_1_Pin) == GPIO_PIN_RESET) {
 800015c:	2110      	movs	r1, #16
 800015e:	480b      	ldr	r0, [pc, #44]	; (800018c <HAL_GPIO_EXTI_Callback+0x40>)
 8000160:	f000 ff6e 	bl	8001040 <HAL_GPIO_ReadPin>
 8000164:	4603      	mov	r3, r0
 8000166:	2b00      	cmp	r3, #0
 8000168:	d108      	bne.n	800017c <HAL_GPIO_EXTI_Callback+0x30>
            transmitFlag = 1;
 800016a:	4b09      	ldr	r3, [pc, #36]	; (8000190 <HAL_GPIO_EXTI_Callback+0x44>)
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
            counter++;
 8000170:	4b08      	ldr	r3, [pc, #32]	; (8000194 <HAL_GPIO_EXTI_Callback+0x48>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_GPIO_EXTI_Callback+0x48>)
 8000178:	6013      	str	r3, [r2, #0]
        } else {
            abortFlag = 1;
        }
    }
}
 800017a:	e002      	b.n	8000182 <HAL_GPIO_EXTI_Callback+0x36>
            abortFlag = 1;
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <HAL_GPIO_EXTI_Callback+0x4c>)
 800017e:	2201      	movs	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	20000178 	.word	0x20000178
 8000194:	20000174 	.word	0x20000174
 8000198:	20000179 	.word	0x20000179

0800019c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001a0:	f000 fbc8 	bl	8000934 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001a4:	f000 f87e 	bl	80002a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001a8:	f000 f93e 	bl	8000428 <MX_GPIO_Init>
	MX_CRC_Init();
 80001ac:	f000 f8c0 	bl	8000330 <MX_CRC_Init>
	MX_SPI2_Init();
 80001b0:	f000 f906 	bl	80003c0 <MX_SPI2_Init>
	MX_SPI1_Init();
 80001b4:	f000 f8d0 	bl	8000358 <MX_SPI1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		transmit[0] = 1500 + rand() % 150;
 80001b8:	f002 fa80 	bl	80026bc <rand>
 80001bc:	4602      	mov	r2, r0
 80001be:	4b32      	ldr	r3, [pc, #200]	; (8000288 <main+0xec>)
 80001c0:	fb83 1302 	smull	r1, r3, r3, r2
 80001c4:	1119      	asrs	r1, r3, #4
 80001c6:	17d3      	asrs	r3, r2, #31
 80001c8:	1acb      	subs	r3, r1, r3
 80001ca:	2196      	movs	r1, #150	; 0x96
 80001cc:	fb01 f303 	mul.w	r3, r1, r3
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80001d6:	4a2d      	ldr	r2, [pc, #180]	; (800028c <main+0xf0>)
 80001d8:	6013      	str	r3, [r2, #0]
		transmit[1] = 15 + rand() % 10;
 80001da:	f002 fa6f 	bl	80026bc <rand>
 80001de:	4601      	mov	r1, r0
 80001e0:	4b2b      	ldr	r3, [pc, #172]	; (8000290 <main+0xf4>)
 80001e2:	fb83 2301 	smull	r2, r3, r3, r1
 80001e6:	109a      	asrs	r2, r3, #2
 80001e8:	17cb      	asrs	r3, r1, #31
 80001ea:	1ad2      	subs	r2, r2, r3
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	1aca      	subs	r2, r1, r3
 80001f6:	f102 030f 	add.w	r3, r2, #15
 80001fa:	4a24      	ldr	r2, [pc, #144]	; (800028c <main+0xf0>)
 80001fc:	6053      	str	r3, [r2, #4]
		transmit[2] = 1;
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <main+0xf0>)
 8000200:	2201      	movs	r2, #1
 8000202:	609a      	str	r2, [r3, #8]
		transmit[3] = 5000 + rand() % 10;
 8000204:	f002 fa5a 	bl	80026bc <rand>
 8000208:	4601      	mov	r1, r0
 800020a:	4b21      	ldr	r3, [pc, #132]	; (8000290 <main+0xf4>)
 800020c:	fb83 2301 	smull	r2, r3, r3, r1
 8000210:	109a      	asrs	r2, r3, #2
 8000212:	17cb      	asrs	r3, r1, #31
 8000214:	1ad2      	subs	r2, r2, r3
 8000216:	4613      	mov	r3, r2
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	4413      	add	r3, r2
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	1aca      	subs	r2, r1, r3
 8000220:	f502 539c 	add.w	r3, r2, #4992	; 0x1380
 8000224:	3308      	adds	r3, #8
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <main+0xf0>)
 8000228:	60d3      	str	r3, [r2, #12]
		transmit[4] = 19 + rand() % 10;
 800022a:	f002 fa47 	bl	80026bc <rand>
 800022e:	4601      	mov	r1, r0
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <main+0xf4>)
 8000232:	fb83 2301 	smull	r2, r3, r3, r1
 8000236:	109a      	asrs	r2, r3, #2
 8000238:	17cb      	asrs	r3, r1, #31
 800023a:	1ad2      	subs	r2, r2, r3
 800023c:	4613      	mov	r3, r2
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	4413      	add	r3, r2
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	1aca      	subs	r2, r1, r3
 8000246:	f102 0313 	add.w	r3, r2, #19
 800024a:	4a10      	ldr	r2, [pc, #64]	; (800028c <main+0xf0>)
 800024c:	6113      	str	r3, [r2, #16]
		transmit[5] = 0;
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0xf0>)
 8000250:	2200      	movs	r2, #0
 8000252:	615a      	str	r2, [r3, #20]

		if (transmitFlag) {
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0xf8>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d008      	beq.n	8000270 <main+0xd4>
			HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) (transmit),
 800025e:	2318      	movs	r3, #24
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <main+0xfc>)
 8000262:	490a      	ldr	r1, [pc, #40]	; (800028c <main+0xf0>)
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <main+0x100>)
 8000266:	f001 fb8f 	bl	8001988 <HAL_SPI_TransmitReceive_IT>
					(uint8_t*) (receive), 24);
			transmitFlag = 0;
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0xf8>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
		}

		if (abortFlag) {
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x104>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	d09e      	beq.n	80001b8 <main+0x1c>
			HAL_SPI_Abort_IT(&hspi1);
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <main+0x100>)
 800027c:	f001 fc2c 	bl	8001ad8 <HAL_SPI_Abort_IT>
			abortFlag = 0;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <main+0x104>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		transmit[0] = 1500 + rand() % 150;
 8000286:	e797      	b.n	80001b8 <main+0x1c>
 8000288:	1b4e81b5 	.word	0x1b4e81b5
 800028c:	20000144 	.word	0x20000144
 8000290:	66666667 	.word	0x66666667
 8000294:	20000178 	.word	0x20000178
 8000298:	2000015c 	.word	0x2000015c
 800029c:	20000094 	.word	0x20000094
 80002a0:	20000179 	.word	0x20000179

080002a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f9fa 	bl	80026ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fed7 	bl	80010a0 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x58>
		Error_Handler();
 80002f8:	f000 f8fa 	bl	80004f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f001 f944 	bl	80015a4 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x82>
		Error_Handler();
 8000322:	f000 f8e5 	bl	80004f0 <Error_Handler>
	}
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_CRC_Init+0x20>)
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <MX_CRC_Init+0x24>)
 8000338:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_CRC_Init+0x20>)
 800033c:	f000 fc69 	bl	8000c12 <HAL_CRC_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000346:	f000 f8d3 	bl	80004f0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	2000008c 	.word	0x2000008c
 8000354:	40023000 	.word	0x40023000

08000358 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_SPI1_Init+0x60>)
 800035e:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_SPI1_Init+0x64>)
 8000360:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_SPI1_Init+0x60>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_SPI1_Init+0x60>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000380:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000386:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_SPI1_Init+0x60>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000390:	2200      	movs	r2, #0
 8000392:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_SPI1_Init+0x60>)
 8000396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_SPI1_Init+0x60>)
 800039e:	220a      	movs	r2, #10
 80003a0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_SPI1_Init+0x60>)
 80003a4:	f001 fa64 	bl	8001870 <HAL_SPI_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_SPI1_Init+0x5a>
		Error_Handler();
 80003ae:	f000 f89f 	bl	80004f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000094 	.word	0x20000094
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_SPI2_Init+0x60>)
 80003c6:	4a17      	ldr	r2, [pc, #92]	; (8000424 <MX_SPI2_Init+0x64>)
 80003c8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_SPI2_Init+0x60>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_SPI2_Init+0x60>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_SPI2_Init+0x60>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_SPI2_Init+0x60>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_SPI2_Init+0x60>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MX_SPI2_Init+0x60>)
 80003ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ee:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_SPI2_Init+0x60>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_SPI2_Init+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_SPI2_Init+0x60>)
 80003fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_SPI2_Init+0x60>)
 8000406:	220a      	movs	r2, #10
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_SPI2_Init+0x60>)
 800040c:	f001 fa30 	bl	8001870 <HAL_SPI_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_SPI2_Init+0x5a>
		Error_Handler();
 8000416:	f000 f86b 	bl	80004f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000ec 	.word	0x200000ec
 8000424:	40003800 	.word	0x40003800

08000428 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a27      	ldr	r2, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : SPI_NSS_1_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_1_Pin;
 8000484:	2310      	movs	r3, #16
 8000486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_GPIO_Init+0xbc>)
 800048a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_NSS_1_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_GPIO_Init+0xc0>)
 8000498:	f000 fc4e 	bl	8000d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_NSS_2_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_2_Pin;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_GPIO_Init+0xbc>)
 80004a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_NSS_2_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480e      	ldr	r0, [pc, #56]	; (80004ec <MX_GPIO_Init+0xc4>)
 80004b2:	f000 fc41 	bl	8000d38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fb73 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f000 fb8c 	bl	8000bde <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2028      	movs	r0, #40	; 0x28
 80004cc:	f000 fb6b 	bl	8000ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d0:	2028      	movs	r0, #40	; 0x28
 80004d2:	f000 fb84 	bl	8000bde <HAL_NVIC_EnableIRQ>

}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	10310000 	.word	0x10310000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <HAL_CRC_MspInit+0x34>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d10b      	bne.n	800058a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_CRC_MspInit+0x38>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_CRC_MspInit+0x38>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_CRC_MspInit+0x38>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40023000 	.word	0x40023000
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <HAL_SPI_MspInit+0x118>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d138      	bne.n	800062e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005bc:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a3d      	ldr	r2, [pc, #244]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a37      	ldr	r2, [pc, #220]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	4619      	mov	r1, r3
 80005fe:	482f      	ldr	r0, [pc, #188]	; (80006bc <HAL_SPI_MspInit+0x120>)
 8000600:	f000 fb9a 	bl	8000d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4619      	mov	r1, r3
 8000616:	4829      	ldr	r0, [pc, #164]	; (80006bc <HAL_SPI_MspInit+0x120>)
 8000618:	f000 fb8e 	bl	8000d38 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2023      	movs	r0, #35	; 0x23
 8000622:	f000 fac0 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000626:	2023      	movs	r0, #35	; 0x23
 8000628:	f000 fad9 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800062c:	e03e      	b.n	80006ac <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <HAL_SPI_MspInit+0x124>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d139      	bne.n	80006ac <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_SPI_MspInit+0x11c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000668:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	4619      	mov	r1, r3
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <HAL_SPI_MspInit+0x128>)
 800067e:	f000 fb5b 	bl	8000d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000682:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_SPI_MspInit+0x128>)
 8000698:	f000 fb4e 	bl	8000d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2024      	movs	r0, #36	; 0x24
 80006a2:	f000 fa80 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80006a6:	2024      	movs	r0, #36	; 0x24
 80006a8:	f000 fa99 	bl	8000bde <HAL_NVIC_EnableIRQ>
}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013000 	.word	0x40013000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40003800 	.word	0x40003800
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800070e:	f000 f957 	bl	80009c0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}

08000716 <EXTI4_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */
	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SPI_NSS_1_Pin);
 800071a:	2010      	movs	r0, #16
 800071c:	f000 fca8 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */

	/* USER CODE END EXTI4_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <SPI1_IRQHandler+0x10>)
 800072a:	f001 fac7 	bl	8001cbc <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000094 	.word	0x20000094

08000738 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI2_IRQn 0 */

	/* USER CODE END SPI2_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi2);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <SPI2_IRQHandler+0x10>)
 800073e:	f001 fabd 	bl	8001cbc <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI2_IRQn 1 */

	/* USER CODE END SPI2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000ec 	.word	0x200000ec

0800074c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SPI_NSS_2_Pin);
 8000750:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000754:	f000 fc8c 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_kill>:

int _kill(int pid, int sig)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000774:	f001 ff70 	bl	8002658 <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	2216      	movs	r2, #22
 800077c:	601a      	str	r2, [r3, #0]
  return -1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_exit>:

void _exit (int status)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000792:	f04f 31ff 	mov.w	r1, #4294967295
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffe7 	bl	800076a <_kill>
  while (1) {}    /* Make sure we hang here */
 800079c:	e7fe      	b.n	800079c <_exit+0x12>

0800079e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e00a      	b.n	80007c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b0:	f3af 8000 	nop.w
 80007b4:	4601      	mov	r1, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	60ba      	str	r2, [r7, #8]
 80007bc:	b2ca      	uxtb	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dbf0      	blt.n	80007b0 <_read+0x12>
  }

  return len;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e009      	b.n	80007fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	60ba      	str	r2, [r7, #8]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3301      	adds	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	429a      	cmp	r2, r3
 8000804:	dbf1      	blt.n	80007ea <_write+0x12>
  }
  return len;
 8000806:	687b      	ldr	r3, [r7, #4]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_close>:

int _close(int file)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	605a      	str	r2, [r3, #4]
  return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <_isatty>:

int _isatty(int file)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f001 feda 	bl	8002658 <__errno>
 80008a4:	4603      	mov	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <_sbrk+0x64>)
 80008c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20005000 	.word	0x20005000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	2000017c 	.word	0x2000017c
 80008d8:	20000198 	.word	0x20000198

080008dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090e:	f7ff ffe5 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000912:	f001 fea7 	bl	8002664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fc41 	bl	800019c <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000924:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 8000928:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800092c:	20000194 	.word	0x20000194

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f923 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fdd4 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f93b 	bl	8000bfa <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f903 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000180 	.word	0x20000180

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000180 	.word	0x20000180

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <__NVIC_EnableIRQ+0x34>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff90 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff2d 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff42 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff35 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e00e      	b.n	8000c42 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	795b      	ldrb	r3, [r3, #5]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d105      	bne.n	8000c3a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff fc93 	bl	8000560 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d005      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2204      	movs	r2, #4
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e051      	b.n	8000d12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 020e 	bic.w	r2, r2, #14
 8000c7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0201 	bic.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_DMA_Abort_IT+0xd0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d029      	beq.n	8000cec <HAL_DMA_Abort_IT+0xa0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <HAL_DMA_Abort_IT+0xd4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d022      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0x9c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <HAL_DMA_Abort_IT+0xd8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01a      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0x96>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_DMA_Abort_IT+0xdc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d012      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x90>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_DMA_Abort_IT+0xe0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x8a>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_DMA_Abort_IT+0xe4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d102      	bne.n	8000cd0 <HAL_DMA_Abort_IT+0x84>
 8000cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cce:	e00e      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd4:	e00b      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	e008      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	e005      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	e002      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000ce8:	2310      	movs	r3, #16
 8000cea:	e000      	b.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000cec:	2301      	movs	r3, #1
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_DMA_Abort_IT+0xe8>)
 8000cf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4798      	blx	r3
    } 
  }
  return status;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020008 	.word	0x40020008
 8000d20:	4002001c 	.word	0x4002001c
 8000d24:	40020030 	.word	0x40020030
 8000d28:	40020044 	.word	0x40020044
 8000d2c:	40020058 	.word	0x40020058
 8000d30:	4002006c 	.word	0x4002006c
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e169      	b.n	8001020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8158 	bne.w	800101a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a98      	ldr	r2, [pc, #608]	; (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a96      	ldr	r2, [pc, #600]	; (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a94      	ldr	r2, [pc, #592]	; (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a92      	ldr	r2, [pc, #584]	; (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a90      	ldr	r2, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a79      	ldr	r2, [pc, #484]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80b1 	beq.w	800101a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d013      	beq.n	8000f24 <HAL_GPIO_Init+0x1ec>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_GPIO_Init+0x2c4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d00d      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_GPIO_Init+0x2c8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <HAL_GPIO_Init+0x2cc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e004      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x1ee>
 8000f24:	2300      	movs	r3, #0
 8000f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f36:	492f      	ldr	r1, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	492c      	ldr	r1, [pc, #176]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4928      	ldr	r1, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4922      	ldr	r1, [pc, #136]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	491e      	ldr	r1, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	4918      	ldr	r1, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60cb      	str	r3, [r1, #12]
 8000fd4:	e021      	b.n	800101a <HAL_GPIO_Init+0x2e2>
 8000fd6:	bf00      	nop
 8000fd8:	10320000 	.word	0x10320000
 8000fdc:	10310000 	.word	0x10310000
 8000fe0:	10220000 	.word	0x10220000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10120000 	.word	0x10120000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000
 8001004:	40011400 	.word	0x40011400
 8001008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_GPIO_Init+0x304>)
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	43db      	mvns	r3, r3
 8001014:	4909      	ldr	r1, [pc, #36]	; (800103c <HAL_GPIO_Init+0x304>)
 8001016:	4013      	ands	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae8e 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	; 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e001      	b.n	8001062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f85c 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e272      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8087 	beq.w	80011ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4b8f      	ldr	r3, [pc, #572]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
 80010d8:	4b8c      	ldr	r3, [pc, #560]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d10b      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06c      	beq.n	80011cc <HAL_RCC_OscConfig+0x12c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d168      	bne.n	80011cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e24c      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x76>
 8001108:	4b80      	ldr	r3, [pc, #512]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a7f      	ldr	r2, [pc, #508]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e02e      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b7b      	ldr	r3, [pc, #492]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a7a      	ldr	r2, [pc, #488]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a77      	ldr	r2, [pc, #476]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0xbc>
 8001142:	4b72      	ldr	r3, [pc, #456]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a71      	ldr	r2, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6e      	ldr	r2, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 800115c:	4b6b      	ldr	r3, [pc, #428]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a67      	ldr	r2, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fc32 	bl	80009e4 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc2e 	bl	80009e4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e200      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xe4>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc1e 	bl	80009e4 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc1a 	bl	80009e4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1ec      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x10c>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c0      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4939      	ldr	r1, [pc, #228]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x270>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fbd3 	bl	80009e4 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fbcf 	bl	80009e4 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4927      	ldr	r1, [pc, #156]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_RCC_OscConfig+0x270>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fbb2 	bl	80009e4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fbae 	bl	80009e4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e180      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d03a      	beq.n	8001324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fb92 	bl	80009e4 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fb8e 	bl	80009e4 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e160      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 faa6 	bl	8001834 <RCC_Delay>
 80012e8:	e01c      	b.n	8001324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fb78 	bl	80009e4 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e00f      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fb74 	bl	80009e4 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d908      	bls.n	8001318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e146      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	42420000 	.word	0x42420000
 8001314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b92      	ldr	r3, [pc, #584]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a6 	beq.w	800147e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b85      	ldr	r3, [pc, #532]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b82      	ldr	r3, [pc, #520]	; (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <HAL_RCC_OscConfig+0x4c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7e      	ldr	r2, [pc, #504]	; (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fb35 	bl	80009e4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fb31 	bl	80009e4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b64      	cmp	r3, #100	; 0x64
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e103      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x312>
 80013a4:	4b6f      	ldr	r3, [pc, #444]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e02d      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a69      	ldr	r2, [pc, #420]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	e01c      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x356>
 80013dc:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a60      	ldr	r2, [pc, #384]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fae5 	bl	80009e4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fae1 	bl	80009e4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ee      	beq.n	800141e <HAL_RCC_OscConfig+0x37e>
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff facf 	bl	80009e4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff facb 	bl	80009e4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e09b      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d061      	beq.n	8001558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d146      	bne.n	800152a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_RCC_OscConfig+0x4cc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa9f 	bl	80009e4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa9b 	bl	80009e4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e06d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4921      	ldr	r1, [pc, #132]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a19      	ldr	r1, [r3, #32]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	430b      	orrs	r3, r1
 80014f6:	491b      	ldr	r1, [pc, #108]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fa6f 	bl	80009e4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fa6b 	bl	80009e4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e03d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x46a>
 8001528:	e035      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_RCC_OscConfig+0x4cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fa58 	bl	80009e4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fa54 	bl	80009e4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e026      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x498>
 8001556:	e01e      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e019      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 8001564:	40021000 	.word	0x40021000
 8001568:	40007000 	.word	0x40007000
 800156c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_OscConfig+0x500>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d0      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4965      	ldr	r1, [pc, #404]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800160a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d040      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e073      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4936      	ldr	r1, [pc, #216]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff f9a6 	bl	80009e4 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff f9a2 	bl	80009e4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e053      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d210      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4922      	ldr	r1, [pc, #136]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f821 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1cc>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f904 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	08003760 	.word	0x08003760
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b490      	push	{r4, r7}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_GetSysClockFreq+0xac>)
 8001780:	1d3c      	adds	r4, r7, #4
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001788:	f240 2301 	movw	r3, #513	; 0x201
 800178c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x40>
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x46>
 80017b6:	e02b      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ba:	623b      	str	r3, [r7, #32]
      break;
 80017bc:	e02b      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3328      	adds	r3, #40	; 0x28
 80017c8:	443b      	add	r3, r7
 80017ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d012      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0c5b      	lsrs	r3, r3, #17
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	3328      	adds	r3, #40	; 0x28
 80017e6:	443b      	add	r3, r7
 80017e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e004      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	623b      	str	r3, [r7, #32]
      break;
 800180e:	e002      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001812:	623b      	str	r3, [r7, #32]
      break;
 8001814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001816:	6a3b      	ldr	r3, [r7, #32]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bc90      	pop	{r4, r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	08003750 	.word	0x08003750
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200
 8001830:	003d0900 	.word	0x003d0900

08001834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <RCC_Delay+0x34>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <RCC_Delay+0x38>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0a5b      	lsrs	r3, r3, #9
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001850:	bf00      	nop
  }
  while (Delay --);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	60fa      	str	r2, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <RCC_Delay+0x1c>
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000000 	.word	0x20000000
 800186c:	10624dd3 	.word	0x10624dd3

08001870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07e      	b.n	8001980 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001892:	d009      	beq.n	80018a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
 800189a:	e005      	b.n	80018a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7fe fe6d 	bl	800059c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	ea42 0103 	orr.w	r1, r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	0c1a      	lsrs	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f002 0204 	and.w	r2, r2, #4
 8001948:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001952:	d105      	bne.n	8001960 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b292      	uxth	r2, r2
 800195e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_SPI_TransmitReceive_IT+0x20>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e08a      	b.n	8001abe <HAL_SPI_TransmitReceive_IT+0x136>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019be:	7dbb      	ldrb	r3, [r7, #22]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d00d      	beq.n	80019e0 <HAL_SPI_TransmitReceive_IT+0x58>
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019ca:	d106      	bne.n	80019da <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_SPI_TransmitReceive_IT+0x52>
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d002      	beq.n	80019e0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80019da:	2302      	movs	r3, #2
 80019dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019de:	e069      	b.n	8001ab4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019f6:	e05d      	b.n	8001ab4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d003      	beq.n	8001a0c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <HAL_SPI_TransmitReceive_IT+0x140>)
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_SPI_TransmitReceive_IT+0x144>)
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4a:	e005      	b.n	8001a58 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_SPI_TransmitReceive_IT+0x148>)
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a60:	d10f      	bne.n	8001a82 <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a80:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001a90:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d008      	beq.n	8001ab2 <HAL_SPI_TransmitReceive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e000      	b.n	8001ab4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

error :
 8001ab2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	080021b9 	.word	0x080021b9
 8001acc:	08002261 	.word	0x08002261
 8001ad0:	08002071 	.word	0x08002071
 8001ad4:	0800212f 	.word	0x0800212f

08001ad8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001ae8:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <HAL_SPI_Abort_IT+0x1cc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_SPI_Abort_IT+0x1d0>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0a5b      	lsrs	r3, r3, #9
 8001af4:	2264      	movs	r2, #100	; 0x64
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0220 	bic.w	r2, r2, #32
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d017      	beq.n	8001b4e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a62      	ldr	r2, [pc, #392]	; (8001cac <HAL_SPI_Abort_IT+0x1d4>)
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001b36:	e008      	b.n	8001b4a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	d1ec      	bne.n	8001b24 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_SPI_Abort_IT+0x1d8>)
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d106      	bne.n	8001b76 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001b74:	e008      	b.n	8001b88 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d1ec      	bne.n	8001b62 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	4a43      	ldr	r2, [pc, #268]	; (8001cb4 <HAL_SPI_Abort_IT+0x1dc>)
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8001baa:	e003      	b.n	8001bb4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00f      	beq.n	8001bdc <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a3a      	ldr	r2, [pc, #232]	; (8001cb8 <HAL_SPI_Abort_IT+0x1e0>)
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd2:	e003      	b.n	8001bdc <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d011      	beq.n	8001c16 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f828 	bl	8000c4c <HAL_DMA_Abort_IT>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c10:	e001      	b.n	8001c16 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f80b 	bl	8000c4c <HAL_DMA_Abort_IT>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
 8001c4a:	e001      	b.n	8001c50 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d121      	bne.n	8001c9a <HAL_SPI_Abort_IT+0x1c2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d102      	bne.n	8001c70 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	77fb      	strb	r3, [r7, #31]
 8001c6e:	e002      	b.n	8001c76 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f912 	bl	8001ebe <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	057619f1 	.word	0x057619f1
 8001cac:	08002609 	.word	0x08002609
 8001cb0:	0800257d 	.word	0x0800257d
 8001cb4:	08001ef9 	.word	0x08001ef9
 8001cb8:	08001fbd 	.word	0x08001fbd

08001cbc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
    return;
 8001cfe:	e0be      	b.n	8001e7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x66>
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	09db      	lsrs	r3, r3, #7
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
    return;
 8001d20:	e0ad      	b.n	8001e7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_SPI_IRQHandler+0x80>
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80a1 	beq.w	8001e7e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 809a 	beq.w	8001e7e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d023      	beq.n	8001d9e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d011      	beq.n	8001d86 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	e00b      	b.n	8001d9e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
        return;
 8001d9c:	e06f      	b.n	8001e7e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d014      	beq.n	8001dd4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d04f      	beq.n	8001e7c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d104      	bne.n	8001e08 <HAL_SPI_IRQHandler+0x14c>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d034      	beq.n	8001e72 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0203 	bic.w	r2, r2, #3
 8001e16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d011      	beq.n	8001e44 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_SPI_IRQHandler+0x1c8>)
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff0d 	bl	8000c4c <HAL_DMA_Abort_IT>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d016      	beq.n	8001e7a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_SPI_IRQHandler+0x1c8>)
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fef7 	bl	8000c4c <HAL_DMA_Abort_IT>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001e70:	e003      	b.n	8001e7a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f81a 	bl	8001eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001e78:	e000      	b.n	8001e7c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001e7a:	bf00      	nop
    return;
 8001e7c:	bf00      	nop
  }
}
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	08001ed1 	.word	0x08001ed1

08001e88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff ffde 	bl	8001eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <SPI_DMATxAbortCallback+0xbc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <SPI_DMATxAbortCallback+0xc0>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	2264      	movs	r2, #100	; 0x64
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0202 	bic.w	r2, r2, #2
 8001f30:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f44:	e009      	b.n	8001f5a <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0eb      	beq.n	8001f32 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11f      	bne.n	8001fac <SPI_DMATxAbortCallback+0xb4>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d002      	beq.n	8001f86 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7ff ff8a 	bl	8001ebe <HAL_SPI_AbortCpltCallback>
 8001faa:	e000      	b.n	8001fae <SPI_DMATxAbortCallback+0xb6>
      return;
 8001fac:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	057619f1 	.word	0x057619f1

08001fbc <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd8:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	2200      	movs	r2, #0
 8001fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001ff2:	f7fe fcf7 	bl	80009e4 <HAL_GetTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2164      	movs	r1, #100	; 0x64
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f9fb 	bl	80023f8 <SPI_EndRxTxTransaction>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11f      	bne.n	8002066 <SPI_DMARxAbortCallback+0xaa>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d002      	beq.n	8002040 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff ff2d 	bl	8001ebe <HAL_SPI_AbortCpltCallback>
 8002064:	e000      	b.n	8002068 <SPI_DMARxAbortCallback+0xac>
      return;
 8002066:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f103 020c 	add.w	r2, r3, #12
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b4:	d103      	bne.n	80020be <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <SPI_2linesRxISR_8BIT+0x74>)
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 80020bc:	e00f      	b.n	80020de <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020cc:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f9ab 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	080020e9 	.word	0x080020e9

080020e8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8002104:	7afb      	ldrb	r3, [r7, #11]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002114:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <SPI_2linesRxISR_8BITCRC+0x3e>
  {
    SPI_CloseRxTx_ISR(hspi);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f987 	bl	8002434 <SPI_CloseRxTx_ISR>
  }
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d125      	bne.n	80021b2 <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216e:	d110      	bne.n	8002192 <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800217e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218e:	605a      	str	r2, [r3, #4]
      return;
 8002190:	e00f      	b.n	80021b2 <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f941 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	b292      	uxth	r2, r2
 80021cc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	1c9a      	adds	r2, r3, #2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d118      	bne.n	8002222 <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f8:	d103      	bne.n	8002202 <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SPI_2linesRxISR_16BIT+0x70>)
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8002200:	e00f      	b.n	8002222 <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002210:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f909 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	0800222d 	.word	0x0800222d

0800222c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8002240:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002250:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8ee 	bl	8002434 <SPI_CloseRxTx_ISR>
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d125      	bne.n	80022e2 <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	d110      	bne.n	80022c2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ae:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022be:	605a      	str	r2, [r3, #4]
      return;
 80022c0:	e00f      	b.n	80022e2 <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f8a9 	bl	8002434 <SPI_CloseRxTx_ISR>
    }
  }
}
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022f8:	f7fe fb74 	bl	80009e4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002308:	f7fe fb6c 	bl	80009e4 <HAL_GetTick>
 800230c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	0d1b      	lsrs	r3, r3, #20
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231e:	e054      	b.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d050      	beq.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002328:	f7fe fb5c 	bl	80009e4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	d902      	bls.n	800233e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d13d      	bne.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800234c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002356:	d111      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d004      	beq.n	800236c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	d107      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d10f      	bne.n	80023a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e017      	b.n	80023ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d19b      	bne.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000

080023f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff6a 	bl	80022e8 <SPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e000      	b.n	800242c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <SPI_CloseRxTx_ISR+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <SPI_CloseRxTx_ISR+0x144>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	2264      	movs	r2, #100	; 0x64
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002450:	f7fe fac8 	bl	80009e4 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0220 	bic.w	r2, r2, #32
 8002464:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002478:	e009      	b.n	800248e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3b01      	subs	r3, #1
 800247e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0eb      	beq.n	8002466 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	2164      	movs	r1, #100	; 0x64
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffb0 	bl	80023f8 <SPI_EndRxTxTransaction>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d129      	bne.n	800252a <SPI_CloseRxTx_ISR+0xf6>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8b3 	bl	8002642 <SPI_ISCRCErrorValid>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d11d      	bne.n	800251e <SPI_CloseRxTx_ISR+0xea>
    {
      hspi->State = HAL_SPI_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002514:	601a      	str	r2, [r3, #0]

      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fcc8 	bl	8001eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800251c:	e026      	b.n	800256c <SPI_CloseRxTx_ISR+0x138>
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	e020      	b.n	800256c <SPI_CloseRxTx_ISR+0x138>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	2b00      	cmp	r3, #0
 8002530:	d115      	bne.n	800255e <SPI_CloseRxTx_ISR+0x12a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b04      	cmp	r3, #4
 800253c:	d107      	bne.n	800254e <SPI_CloseRxTx_ISR+0x11a>
        hspi->State = HAL_SPI_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fc9e 	bl	8001e88 <HAL_SPI_RxCpltCallback>
}
 800254c:	e00e      	b.n	800256c <SPI_CloseRxTx_ISR+0x138>
        hspi->State = HAL_SPI_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fc9f 	bl	8001e9a <HAL_SPI_TxRxCpltCallback>
}
 800255c:	e006      	b.n	800256c <SPI_CloseRxTx_ISR+0x138>
      hspi->State = HAL_SPI_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fca0 	bl	8001eac <HAL_SPI_ErrorCallback>
}
 800256c:	bf00      	nop
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000000 	.word	0x20000000
 8002578:	057619f1 	.word	0x057619f1

0800257c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <SPI_AbortRx_ISR+0x84>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <SPI_AbortRx_ISR+0x88>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0a5b      	lsrs	r3, r3, #9
 8002594:	2264      	movs	r2, #100	; 0x64
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025ae:	e009      	b.n	80025c4 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0eb      	beq.n	800259c <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025e2:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80025ec:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2207      	movs	r2, #7
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000000 	.word	0x20000000
 8002604:	057619f1 	.word	0x057619f1

08002608 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2207      	movs	r2, #7
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  }
#endif
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <__errno>:
 8002658:	4b01      	ldr	r3, [pc, #4]	; (8002660 <__errno+0x8>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c

08002664 <__libc_init_array>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	2600      	movs	r6, #0
 8002668:	4d0c      	ldr	r5, [pc, #48]	; (800269c <__libc_init_array+0x38>)
 800266a:	4c0d      	ldr	r4, [pc, #52]	; (80026a0 <__libc_init_array+0x3c>)
 800266c:	1b64      	subs	r4, r4, r5
 800266e:	10a4      	asrs	r4, r4, #2
 8002670:	42a6      	cmp	r6, r4
 8002672:	d109      	bne.n	8002688 <__libc_init_array+0x24>
 8002674:	f001 f860 	bl	8003738 <_init>
 8002678:	2600      	movs	r6, #0
 800267a:	4d0a      	ldr	r5, [pc, #40]	; (80026a4 <__libc_init_array+0x40>)
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <__libc_init_array+0x44>)
 800267e:	1b64      	subs	r4, r4, r5
 8002680:	10a4      	asrs	r4, r4, #2
 8002682:	42a6      	cmp	r6, r4
 8002684:	d105      	bne.n	8002692 <__libc_init_array+0x2e>
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	f855 3b04 	ldr.w	r3, [r5], #4
 800268c:	4798      	blx	r3
 800268e:	3601      	adds	r6, #1
 8002690:	e7ee      	b.n	8002670 <__libc_init_array+0xc>
 8002692:	f855 3b04 	ldr.w	r3, [r5], #4
 8002696:	4798      	blx	r3
 8002698:	3601      	adds	r6, #1
 800269a:	e7f2      	b.n	8002682 <__libc_init_array+0x1e>
 800269c:	080038b8 	.word	0x080038b8
 80026a0:	080038b8 	.word	0x080038b8
 80026a4:	080038b8 	.word	0x080038b8
 80026a8:	080038bc 	.word	0x080038bc

080026ac <memset>:
 80026ac:	4603      	mov	r3, r0
 80026ae:	4402      	add	r2, r0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <rand>:
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <rand+0x5c>)
 80026be:	b510      	push	{r4, lr}
 80026c0:	681c      	ldr	r4, [r3, #0]
 80026c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026c4:	b9b3      	cbnz	r3, 80026f4 <rand+0x38>
 80026c6:	2018      	movs	r0, #24
 80026c8:	f000 f866 	bl	8002798 <malloc>
 80026cc:	4602      	mov	r2, r0
 80026ce:	63a0      	str	r0, [r4, #56]	; 0x38
 80026d0:	b920      	cbnz	r0, 80026dc <rand+0x20>
 80026d2:	214e      	movs	r1, #78	; 0x4e
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <rand+0x60>)
 80026d6:	4812      	ldr	r0, [pc, #72]	; (8002720 <rand+0x64>)
 80026d8:	f000 f82e 	bl	8002738 <__assert_func>
 80026dc:	4911      	ldr	r1, [pc, #68]	; (8002724 <rand+0x68>)
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <rand+0x6c>)
 80026e0:	e9c0 1300 	strd	r1, r3, [r0]
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <rand+0x70>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	6083      	str	r3, [r0, #8]
 80026ea:	230b      	movs	r3, #11
 80026ec:	8183      	strh	r3, [r0, #12]
 80026ee:	2001      	movs	r0, #1
 80026f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80026f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <rand+0x74>)
 80026f8:	6920      	ldr	r0, [r4, #16]
 80026fa:	6963      	ldr	r3, [r4, #20]
 80026fc:	4342      	muls	r2, r0
 80026fe:	490d      	ldr	r1, [pc, #52]	; (8002734 <rand+0x78>)
 8002700:	fb01 2203 	mla	r2, r1, r3, r2
 8002704:	fba0 0101 	umull	r0, r1, r0, r1
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	eb42 0001 	adc.w	r0, r2, r1
 800270e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002712:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002716:	bd10      	pop	{r4, pc}
 8002718:	2000000c 	.word	0x2000000c
 800271c:	08003774 	.word	0x08003774
 8002720:	0800378b 	.word	0x0800378b
 8002724:	abcd330e 	.word	0xabcd330e
 8002728:	e66d1234 	.word	0xe66d1234
 800272c:	0005deec 	.word	0x0005deec
 8002730:	5851f42d 	.word	0x5851f42d
 8002734:	4c957f2d 	.word	0x4c957f2d

08002738 <__assert_func>:
 8002738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800273a:	4614      	mov	r4, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <__assert_func+0x2c>)
 8002740:	4605      	mov	r5, r0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68d8      	ldr	r0, [r3, #12]
 8002746:	b14c      	cbz	r4, 800275c <__assert_func+0x24>
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <__assert_func+0x30>)
 800274a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800274e:	9100      	str	r1, [sp, #0]
 8002750:	462b      	mov	r3, r5
 8002752:	4906      	ldr	r1, [pc, #24]	; (800276c <__assert_func+0x34>)
 8002754:	f000 f80e 	bl	8002774 <fiprintf>
 8002758:	f000 fcc0 	bl	80030dc <abort>
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__assert_func+0x38>)
 800275e:	461c      	mov	r4, r3
 8002760:	e7f3      	b.n	800274a <__assert_func+0x12>
 8002762:	bf00      	nop
 8002764:	2000000c 	.word	0x2000000c
 8002768:	080037e6 	.word	0x080037e6
 800276c:	080037f3 	.word	0x080037f3
 8002770:	08003821 	.word	0x08003821

08002774 <fiprintf>:
 8002774:	b40e      	push	{r1, r2, r3}
 8002776:	b503      	push	{r0, r1, lr}
 8002778:	4601      	mov	r1, r0
 800277a:	ab03      	add	r3, sp, #12
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <fiprintf+0x20>)
 800277e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002782:	6800      	ldr	r0, [r0, #0]
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	f000 f913 	bl	80029b0 <_vfiprintf_r>
 800278a:	b002      	add	sp, #8
 800278c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002790:	b003      	add	sp, #12
 8002792:	4770      	bx	lr
 8002794:	2000000c 	.word	0x2000000c

08002798 <malloc>:
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <malloc+0xc>)
 800279a:	4601      	mov	r1, r0
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f000 b86b 	b.w	8002878 <_malloc_r>
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <_free_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4605      	mov	r5, r0
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d040      	beq.n	8002832 <_free_r+0x8a>
 80027b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b4:	1f0c      	subs	r4, r1, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bfb8      	it	lt
 80027ba:	18e4      	addlt	r4, r4, r3
 80027bc:	f000 fec0 	bl	8003540 <__malloc_lock>
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <_free_r+0x8c>)
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	b933      	cbnz	r3, 80027d4 <_free_r+0x2c>
 80027c6:	6063      	str	r3, [r4, #4]
 80027c8:	6014      	str	r4, [r2, #0]
 80027ca:	4628      	mov	r0, r5
 80027cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d0:	f000 bebc 	b.w	800354c <__malloc_unlock>
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	d908      	bls.n	80027ea <_free_r+0x42>
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	1821      	adds	r1, r4, r0
 80027dc:	428b      	cmp	r3, r1
 80027de:	bf01      	itttt	eq
 80027e0:	6819      	ldreq	r1, [r3, #0]
 80027e2:	685b      	ldreq	r3, [r3, #4]
 80027e4:	1809      	addeq	r1, r1, r0
 80027e6:	6021      	streq	r1, [r4, #0]
 80027e8:	e7ed      	b.n	80027c6 <_free_r+0x1e>
 80027ea:	461a      	mov	r2, r3
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	b10b      	cbz	r3, 80027f4 <_free_r+0x4c>
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d9fa      	bls.n	80027ea <_free_r+0x42>
 80027f4:	6811      	ldr	r1, [r2, #0]
 80027f6:	1850      	adds	r0, r2, r1
 80027f8:	42a0      	cmp	r0, r4
 80027fa:	d10b      	bne.n	8002814 <_free_r+0x6c>
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	1850      	adds	r0, r2, r1
 8002802:	4283      	cmp	r3, r0
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	d1e0      	bne.n	80027ca <_free_r+0x22>
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4401      	add	r1, r0
 800280e:	6011      	str	r1, [r2, #0]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	e7da      	b.n	80027ca <_free_r+0x22>
 8002814:	d902      	bls.n	800281c <_free_r+0x74>
 8002816:	230c      	movs	r3, #12
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	e7d6      	b.n	80027ca <_free_r+0x22>
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	1821      	adds	r1, r4, r0
 8002820:	428b      	cmp	r3, r1
 8002822:	bf01      	itttt	eq
 8002824:	6819      	ldreq	r1, [r3, #0]
 8002826:	685b      	ldreq	r3, [r3, #4]
 8002828:	1809      	addeq	r1, r1, r0
 800282a:	6021      	streq	r1, [r4, #0]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	6054      	str	r4, [r2, #4]
 8002830:	e7cb      	b.n	80027ca <_free_r+0x22>
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	20000184 	.word	0x20000184

08002838 <sbrk_aligned>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4e0e      	ldr	r6, [pc, #56]	; (8002874 <sbrk_aligned+0x3c>)
 800283c:	460c      	mov	r4, r1
 800283e:	6831      	ldr	r1, [r6, #0]
 8002840:	4605      	mov	r5, r0
 8002842:	b911      	cbnz	r1, 800284a <sbrk_aligned+0x12>
 8002844:	f000 fb7a 	bl	8002f3c <_sbrk_r>
 8002848:	6030      	str	r0, [r6, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f000 fb75 	bl	8002f3c <_sbrk_r>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	d00a      	beq.n	800286c <sbrk_aligned+0x34>
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d007      	beq.n	8002870 <sbrk_aligned+0x38>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fb6a 	bl	8002f3c <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d101      	bne.n	8002870 <sbrk_aligned+0x38>
 800286c:	f04f 34ff 	mov.w	r4, #4294967295
 8002870:	4620      	mov	r0, r4
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	20000188 	.word	0x20000188

08002878 <_malloc_r>:
 8002878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287c:	1ccd      	adds	r5, r1, #3
 800287e:	f025 0503 	bic.w	r5, r5, #3
 8002882:	3508      	adds	r5, #8
 8002884:	2d0c      	cmp	r5, #12
 8002886:	bf38      	it	cc
 8002888:	250c      	movcc	r5, #12
 800288a:	2d00      	cmp	r5, #0
 800288c:	4607      	mov	r7, r0
 800288e:	db01      	blt.n	8002894 <_malloc_r+0x1c>
 8002890:	42a9      	cmp	r1, r5
 8002892:	d905      	bls.n	80028a0 <_malloc_r+0x28>
 8002894:	230c      	movs	r3, #12
 8002896:	2600      	movs	r6, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4630      	mov	r0, r6
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a0:	4e2e      	ldr	r6, [pc, #184]	; (800295c <_malloc_r+0xe4>)
 80028a2:	f000 fe4d 	bl	8003540 <__malloc_lock>
 80028a6:	6833      	ldr	r3, [r6, #0]
 80028a8:	461c      	mov	r4, r3
 80028aa:	bb34      	cbnz	r4, 80028fa <_malloc_r+0x82>
 80028ac:	4629      	mov	r1, r5
 80028ae:	4638      	mov	r0, r7
 80028b0:	f7ff ffc2 	bl	8002838 <sbrk_aligned>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	4604      	mov	r4, r0
 80028b8:	d14d      	bne.n	8002956 <_malloc_r+0xde>
 80028ba:	6834      	ldr	r4, [r6, #0]
 80028bc:	4626      	mov	r6, r4
 80028be:	2e00      	cmp	r6, #0
 80028c0:	d140      	bne.n	8002944 <_malloc_r+0xcc>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	4631      	mov	r1, r6
 80028c6:	4638      	mov	r0, r7
 80028c8:	eb04 0803 	add.w	r8, r4, r3
 80028cc:	f000 fb36 	bl	8002f3c <_sbrk_r>
 80028d0:	4580      	cmp	r8, r0
 80028d2:	d13a      	bne.n	800294a <_malloc_r+0xd2>
 80028d4:	6821      	ldr	r1, [r4, #0]
 80028d6:	3503      	adds	r5, #3
 80028d8:	1a6d      	subs	r5, r5, r1
 80028da:	f025 0503 	bic.w	r5, r5, #3
 80028de:	3508      	adds	r5, #8
 80028e0:	2d0c      	cmp	r5, #12
 80028e2:	bf38      	it	cc
 80028e4:	250c      	movcc	r5, #12
 80028e6:	4638      	mov	r0, r7
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7ff ffa5 	bl	8002838 <sbrk_aligned>
 80028ee:	3001      	adds	r0, #1
 80028f0:	d02b      	beq.n	800294a <_malloc_r+0xd2>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	442b      	add	r3, r5
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	e00e      	b.n	8002918 <_malloc_r+0xa0>
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	1b52      	subs	r2, r2, r5
 80028fe:	d41e      	bmi.n	800293e <_malloc_r+0xc6>
 8002900:	2a0b      	cmp	r2, #11
 8002902:	d916      	bls.n	8002932 <_malloc_r+0xba>
 8002904:	1961      	adds	r1, r4, r5
 8002906:	42a3      	cmp	r3, r4
 8002908:	6025      	str	r5, [r4, #0]
 800290a:	bf18      	it	ne
 800290c:	6059      	strne	r1, [r3, #4]
 800290e:	6863      	ldr	r3, [r4, #4]
 8002910:	bf08      	it	eq
 8002912:	6031      	streq	r1, [r6, #0]
 8002914:	5162      	str	r2, [r4, r5]
 8002916:	604b      	str	r3, [r1, #4]
 8002918:	4638      	mov	r0, r7
 800291a:	f104 060b 	add.w	r6, r4, #11
 800291e:	f000 fe15 	bl	800354c <__malloc_unlock>
 8002922:	f026 0607 	bic.w	r6, r6, #7
 8002926:	1d23      	adds	r3, r4, #4
 8002928:	1af2      	subs	r2, r6, r3
 800292a:	d0b6      	beq.n	800289a <_malloc_r+0x22>
 800292c:	1b9b      	subs	r3, r3, r6
 800292e:	50a3      	str	r3, [r4, r2]
 8002930:	e7b3      	b.n	800289a <_malloc_r+0x22>
 8002932:	6862      	ldr	r2, [r4, #4]
 8002934:	42a3      	cmp	r3, r4
 8002936:	bf0c      	ite	eq
 8002938:	6032      	streq	r2, [r6, #0]
 800293a:	605a      	strne	r2, [r3, #4]
 800293c:	e7ec      	b.n	8002918 <_malloc_r+0xa0>
 800293e:	4623      	mov	r3, r4
 8002940:	6864      	ldr	r4, [r4, #4]
 8002942:	e7b2      	b.n	80028aa <_malloc_r+0x32>
 8002944:	4634      	mov	r4, r6
 8002946:	6876      	ldr	r6, [r6, #4]
 8002948:	e7b9      	b.n	80028be <_malloc_r+0x46>
 800294a:	230c      	movs	r3, #12
 800294c:	4638      	mov	r0, r7
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	f000 fdfc 	bl	800354c <__malloc_unlock>
 8002954:	e7a1      	b.n	800289a <_malloc_r+0x22>
 8002956:	6025      	str	r5, [r4, #0]
 8002958:	e7de      	b.n	8002918 <_malloc_r+0xa0>
 800295a:	bf00      	nop
 800295c:	20000184 	.word	0x20000184

08002960 <__sfputc_r>:
 8002960:	6893      	ldr	r3, [r2, #8]
 8002962:	b410      	push	{r4}
 8002964:	3b01      	subs	r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	da07      	bge.n	800297c <__sfputc_r+0x1c>
 800296c:	6994      	ldr	r4, [r2, #24]
 800296e:	42a3      	cmp	r3, r4
 8002970:	db01      	blt.n	8002976 <__sfputc_r+0x16>
 8002972:	290a      	cmp	r1, #10
 8002974:	d102      	bne.n	800297c <__sfputc_r+0x1c>
 8002976:	bc10      	pop	{r4}
 8002978:	f000 baf0 	b.w	8002f5c <__swbuf_r>
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	1c58      	adds	r0, r3, #1
 8002980:	6010      	str	r0, [r2, #0]
 8002982:	7019      	strb	r1, [r3, #0]
 8002984:	4608      	mov	r0, r1
 8002986:	bc10      	pop	{r4}
 8002988:	4770      	bx	lr

0800298a <__sfputs_r>:
 800298a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298c:	4606      	mov	r6, r0
 800298e:	460f      	mov	r7, r1
 8002990:	4614      	mov	r4, r2
 8002992:	18d5      	adds	r5, r2, r3
 8002994:	42ac      	cmp	r4, r5
 8002996:	d101      	bne.n	800299c <__sfputs_r+0x12>
 8002998:	2000      	movs	r0, #0
 800299a:	e007      	b.n	80029ac <__sfputs_r+0x22>
 800299c:	463a      	mov	r2, r7
 800299e:	4630      	mov	r0, r6
 80029a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a4:	f7ff ffdc 	bl	8002960 <__sfputc_r>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d1f3      	bne.n	8002994 <__sfputs_r+0xa>
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029b0 <_vfiprintf_r>:
 80029b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b4:	460d      	mov	r5, r1
 80029b6:	4614      	mov	r4, r2
 80029b8:	4698      	mov	r8, r3
 80029ba:	4606      	mov	r6, r0
 80029bc:	b09d      	sub	sp, #116	; 0x74
 80029be:	b118      	cbz	r0, 80029c8 <_vfiprintf_r+0x18>
 80029c0:	6983      	ldr	r3, [r0, #24]
 80029c2:	b90b      	cbnz	r3, 80029c8 <_vfiprintf_r+0x18>
 80029c4:	f000 fca8 	bl	8003318 <__sinit>
 80029c8:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <_vfiprintf_r+0x240>)
 80029ca:	429d      	cmp	r5, r3
 80029cc:	d11b      	bne.n	8002a06 <_vfiprintf_r+0x56>
 80029ce:	6875      	ldr	r5, [r6, #4]
 80029d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029d2:	07d9      	lsls	r1, r3, #31
 80029d4:	d405      	bmi.n	80029e2 <_vfiprintf_r+0x32>
 80029d6:	89ab      	ldrh	r3, [r5, #12]
 80029d8:	059a      	lsls	r2, r3, #22
 80029da:	d402      	bmi.n	80029e2 <_vfiprintf_r+0x32>
 80029dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029de:	f000 fd39 	bl	8003454 <__retarget_lock_acquire_recursive>
 80029e2:	89ab      	ldrh	r3, [r5, #12]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	d501      	bpl.n	80029ec <_vfiprintf_r+0x3c>
 80029e8:	692b      	ldr	r3, [r5, #16]
 80029ea:	b9eb      	cbnz	r3, 8002a28 <_vfiprintf_r+0x78>
 80029ec:	4629      	mov	r1, r5
 80029ee:	4630      	mov	r0, r6
 80029f0:	f000 fb06 	bl	8003000 <__swsetup_r>
 80029f4:	b1c0      	cbz	r0, 8002a28 <_vfiprintf_r+0x78>
 80029f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029f8:	07dc      	lsls	r4, r3, #31
 80029fa:	d50e      	bpl.n	8002a1a <_vfiprintf_r+0x6a>
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	b01d      	add	sp, #116	; 0x74
 8002a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <_vfiprintf_r+0x244>)
 8002a08:	429d      	cmp	r5, r3
 8002a0a:	d101      	bne.n	8002a10 <_vfiprintf_r+0x60>
 8002a0c:	68b5      	ldr	r5, [r6, #8]
 8002a0e:	e7df      	b.n	80029d0 <_vfiprintf_r+0x20>
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <_vfiprintf_r+0x248>)
 8002a12:	429d      	cmp	r5, r3
 8002a14:	bf08      	it	eq
 8002a16:	68f5      	ldreq	r5, [r6, #12]
 8002a18:	e7da      	b.n	80029d0 <_vfiprintf_r+0x20>
 8002a1a:	89ab      	ldrh	r3, [r5, #12]
 8002a1c:	0598      	lsls	r0, r3, #22
 8002a1e:	d4ed      	bmi.n	80029fc <_vfiprintf_r+0x4c>
 8002a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a22:	f000 fd18 	bl	8003456 <__retarget_lock_release_recursive>
 8002a26:	e7e9      	b.n	80029fc <_vfiprintf_r+0x4c>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a32:	2330      	movs	r3, #48	; 0x30
 8002a34:	f04f 0901 	mov.w	r9, #1
 8002a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002bfc <_vfiprintf_r+0x24c>
 8002a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a44:	4623      	mov	r3, r4
 8002a46:	469a      	mov	sl, r3
 8002a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a4c:	b10a      	cbz	r2, 8002a52 <_vfiprintf_r+0xa2>
 8002a4e:	2a25      	cmp	r2, #37	; 0x25
 8002a50:	d1f9      	bne.n	8002a46 <_vfiprintf_r+0x96>
 8002a52:	ebba 0b04 	subs.w	fp, sl, r4
 8002a56:	d00b      	beq.n	8002a70 <_vfiprintf_r+0xc0>
 8002a58:	465b      	mov	r3, fp
 8002a5a:	4622      	mov	r2, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f7ff ff93 	bl	800298a <__sfputs_r>
 8002a64:	3001      	adds	r0, #1
 8002a66:	f000 80aa 	beq.w	8002bbe <_vfiprintf_r+0x20e>
 8002a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a6c:	445a      	add	r2, fp
 8002a6e:	9209      	str	r2, [sp, #36]	; 0x24
 8002a70:	f89a 3000 	ldrb.w	r3, [sl]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a2 	beq.w	8002bbe <_vfiprintf_r+0x20e>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a84:	f10a 0a01 	add.w	sl, sl, #1
 8002a88:	9304      	str	r3, [sp, #16]
 8002a8a:	9307      	str	r3, [sp, #28]
 8002a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a90:	931a      	str	r3, [sp, #104]	; 0x68
 8002a92:	4654      	mov	r4, sl
 8002a94:	2205      	movs	r2, #5
 8002a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9a:	4858      	ldr	r0, [pc, #352]	; (8002bfc <_vfiprintf_r+0x24c>)
 8002a9c:	f000 fd42 	bl	8003524 <memchr>
 8002aa0:	9a04      	ldr	r2, [sp, #16]
 8002aa2:	b9d8      	cbnz	r0, 8002adc <_vfiprintf_r+0x12c>
 8002aa4:	06d1      	lsls	r1, r2, #27
 8002aa6:	bf44      	itt	mi
 8002aa8:	2320      	movmi	r3, #32
 8002aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aae:	0713      	lsls	r3, r2, #28
 8002ab0:	bf44      	itt	mi
 8002ab2:	232b      	movmi	r3, #43	; 0x2b
 8002ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8002abc:	2b2a      	cmp	r3, #42	; 0x2a
 8002abe:	d015      	beq.n	8002aec <_vfiprintf_r+0x13c>
 8002ac0:	4654      	mov	r4, sl
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f04f 0c0a 	mov.w	ip, #10
 8002ac8:	9a07      	ldr	r2, [sp, #28]
 8002aca:	4621      	mov	r1, r4
 8002acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ad0:	3b30      	subs	r3, #48	; 0x30
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d94e      	bls.n	8002b74 <_vfiprintf_r+0x1c4>
 8002ad6:	b1b0      	cbz	r0, 8002b06 <_vfiprintf_r+0x156>
 8002ad8:	9207      	str	r2, [sp, #28]
 8002ada:	e014      	b.n	8002b06 <_vfiprintf_r+0x156>
 8002adc:	eba0 0308 	sub.w	r3, r0, r8
 8002ae0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	46a2      	mov	sl, r4
 8002ae8:	9304      	str	r3, [sp, #16]
 8002aea:	e7d2      	b.n	8002a92 <_vfiprintf_r+0xe2>
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	1d19      	adds	r1, r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	9103      	str	r1, [sp, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bfbb      	ittet	lt
 8002af8:	425b      	neglt	r3, r3
 8002afa:	f042 0202 	orrlt.w	r2, r2, #2
 8002afe:	9307      	strge	r3, [sp, #28]
 8002b00:	9307      	strlt	r3, [sp, #28]
 8002b02:	bfb8      	it	lt
 8002b04:	9204      	strlt	r2, [sp, #16]
 8002b06:	7823      	ldrb	r3, [r4, #0]
 8002b08:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0a:	d10c      	bne.n	8002b26 <_vfiprintf_r+0x176>
 8002b0c:	7863      	ldrb	r3, [r4, #1]
 8002b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b10:	d135      	bne.n	8002b7e <_vfiprintf_r+0x1ce>
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	3402      	adds	r4, #2
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b24:	9305      	str	r3, [sp, #20]
 8002b26:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c00 <_vfiprintf_r+0x250>
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	4650      	mov	r0, sl
 8002b2e:	7821      	ldrb	r1, [r4, #0]
 8002b30:	f000 fcf8 	bl	8003524 <memchr>
 8002b34:	b140      	cbz	r0, 8002b48 <_vfiprintf_r+0x198>
 8002b36:	2340      	movs	r3, #64	; 0x40
 8002b38:	eba0 000a 	sub.w	r0, r0, sl
 8002b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8002b40:	9b04      	ldr	r3, [sp, #16]
 8002b42:	3401      	adds	r4, #1
 8002b44:	4303      	orrs	r3, r0
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b4c:	2206      	movs	r2, #6
 8002b4e:	482d      	ldr	r0, [pc, #180]	; (8002c04 <_vfiprintf_r+0x254>)
 8002b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b54:	f000 fce6 	bl	8003524 <memchr>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d03f      	beq.n	8002bdc <_vfiprintf_r+0x22c>
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <_vfiprintf_r+0x258>)
 8002b5e:	bb1b      	cbnz	r3, 8002ba8 <_vfiprintf_r+0x1f8>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	3307      	adds	r3, #7
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	3308      	adds	r3, #8
 8002b6a:	9303      	str	r3, [sp, #12]
 8002b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6e:	443b      	add	r3, r7
 8002b70:	9309      	str	r3, [sp, #36]	; 0x24
 8002b72:	e767      	b.n	8002a44 <_vfiprintf_r+0x94>
 8002b74:	460c      	mov	r4, r1
 8002b76:	2001      	movs	r0, #1
 8002b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b7c:	e7a5      	b.n	8002aca <_vfiprintf_r+0x11a>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f04f 0c0a 	mov.w	ip, #10
 8002b84:	4619      	mov	r1, r3
 8002b86:	3401      	adds	r4, #1
 8002b88:	9305      	str	r3, [sp, #20]
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b90:	3a30      	subs	r2, #48	; 0x30
 8002b92:	2a09      	cmp	r2, #9
 8002b94:	d903      	bls.n	8002b9e <_vfiprintf_r+0x1ee>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0c5      	beq.n	8002b26 <_vfiprintf_r+0x176>
 8002b9a:	9105      	str	r1, [sp, #20]
 8002b9c:	e7c3      	b.n	8002b26 <_vfiprintf_r+0x176>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ba6:	e7f0      	b.n	8002b8a <_vfiprintf_r+0x1da>
 8002ba8:	ab03      	add	r3, sp, #12
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	462a      	mov	r2, r5
 8002bae:	4630      	mov	r0, r6
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <_vfiprintf_r+0x25c>)
 8002bb2:	a904      	add	r1, sp, #16
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	4607      	mov	r7, r0
 8002bba:	1c78      	adds	r0, r7, #1
 8002bbc:	d1d6      	bne.n	8002b6c <_vfiprintf_r+0x1bc>
 8002bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bc0:	07d9      	lsls	r1, r3, #31
 8002bc2:	d405      	bmi.n	8002bd0 <_vfiprintf_r+0x220>
 8002bc4:	89ab      	ldrh	r3, [r5, #12]
 8002bc6:	059a      	lsls	r2, r3, #22
 8002bc8:	d402      	bmi.n	8002bd0 <_vfiprintf_r+0x220>
 8002bca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bcc:	f000 fc43 	bl	8003456 <__retarget_lock_release_recursive>
 8002bd0:	89ab      	ldrh	r3, [r5, #12]
 8002bd2:	065b      	lsls	r3, r3, #25
 8002bd4:	f53f af12 	bmi.w	80029fc <_vfiprintf_r+0x4c>
 8002bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bda:	e711      	b.n	8002a00 <_vfiprintf_r+0x50>
 8002bdc:	ab03      	add	r3, sp, #12
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	462a      	mov	r2, r5
 8002be2:	4630      	mov	r0, r6
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <_vfiprintf_r+0x25c>)
 8002be6:	a904      	add	r1, sp, #16
 8002be8:	f000 f882 	bl	8002cf0 <_printf_i>
 8002bec:	e7e4      	b.n	8002bb8 <_vfiprintf_r+0x208>
 8002bee:	bf00      	nop
 8002bf0:	08003878 	.word	0x08003878
 8002bf4:	08003898 	.word	0x08003898
 8002bf8:	08003858 	.word	0x08003858
 8002bfc:	08003822 	.word	0x08003822
 8002c00:	08003828 	.word	0x08003828
 8002c04:	0800382c 	.word	0x0800382c
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	0800298b 	.word	0x0800298b

08002c10 <_printf_common>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	4616      	mov	r6, r2
 8002c16:	4699      	mov	r9, r3
 8002c18:	688a      	ldr	r2, [r1, #8]
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4607      	mov	r7, r0
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bfb8      	it	lt
 8002c22:	4613      	movlt	r3, r2
 8002c24:	6033      	str	r3, [r6, #0]
 8002c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c30:	b10a      	cbz	r2, 8002c36 <_printf_common+0x26>
 8002c32:	3301      	adds	r3, #1
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	0699      	lsls	r1, r3, #26
 8002c3a:	bf42      	ittt	mi
 8002c3c:	6833      	ldrmi	r3, [r6, #0]
 8002c3e:	3302      	addmi	r3, #2
 8002c40:	6033      	strmi	r3, [r6, #0]
 8002c42:	6825      	ldr	r5, [r4, #0]
 8002c44:	f015 0506 	ands.w	r5, r5, #6
 8002c48:	d106      	bne.n	8002c58 <_printf_common+0x48>
 8002c4a:	f104 0a19 	add.w	sl, r4, #25
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	6832      	ldr	r2, [r6, #0]
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	42ab      	cmp	r3, r5
 8002c56:	dc28      	bgt.n	8002caa <_printf_common+0x9a>
 8002c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c5c:	1e13      	subs	r3, r2, #0
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	bf18      	it	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	0692      	lsls	r2, r2, #26
 8002c66:	d42d      	bmi.n	8002cc4 <_printf_common+0xb4>
 8002c68:	4649      	mov	r1, r9
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c70:	47c0      	blx	r8
 8002c72:	3001      	adds	r0, #1
 8002c74:	d020      	beq.n	8002cb8 <_printf_common+0xa8>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	68e5      	ldr	r5, [r4, #12]
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf18      	it	ne
 8002c82:	2500      	movne	r5, #0
 8002c84:	6832      	ldr	r2, [r6, #0]
 8002c86:	f04f 0600 	mov.w	r6, #0
 8002c8a:	68a3      	ldr	r3, [r4, #8]
 8002c8c:	bf08      	it	eq
 8002c8e:	1aad      	subeq	r5, r5, r2
 8002c90:	6922      	ldr	r2, [r4, #16]
 8002c92:	bf08      	it	eq
 8002c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bfc4      	itt	gt
 8002c9c:	1a9b      	subgt	r3, r3, r2
 8002c9e:	18ed      	addgt	r5, r5, r3
 8002ca0:	341a      	adds	r4, #26
 8002ca2:	42b5      	cmp	r5, r6
 8002ca4:	d11a      	bne.n	8002cdc <_printf_common+0xcc>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e008      	b.n	8002cbc <_printf_common+0xac>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4652      	mov	r2, sl
 8002cae:	4649      	mov	r1, r9
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	47c0      	blx	r8
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d103      	bne.n	8002cc0 <_printf_common+0xb0>
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc0:	3501      	adds	r5, #1
 8002cc2:	e7c4      	b.n	8002c4e <_printf_common+0x3e>
 8002cc4:	2030      	movs	r0, #48	; 0x30
 8002cc6:	18e1      	adds	r1, r4, r3
 8002cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cd2:	4422      	add	r2, r4
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cda:	e7c5      	b.n	8002c68 <_printf_common+0x58>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	47c0      	blx	r8
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d0e6      	beq.n	8002cb8 <_printf_common+0xa8>
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7d9      	b.n	8002ca2 <_printf_common+0x92>
	...

08002cf0 <_printf_i>:
 8002cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	7e0f      	ldrb	r7, [r1, #24]
 8002cf6:	4691      	mov	r9, r2
 8002cf8:	2f78      	cmp	r7, #120	; 0x78
 8002cfa:	4680      	mov	r8, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	469a      	mov	sl, r3
 8002d00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d06:	d807      	bhi.n	8002d18 <_printf_i+0x28>
 8002d08:	2f62      	cmp	r7, #98	; 0x62
 8002d0a:	d80a      	bhi.n	8002d22 <_printf_i+0x32>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	f000 80d9 	beq.w	8002ec4 <_printf_i+0x1d4>
 8002d12:	2f58      	cmp	r7, #88	; 0x58
 8002d14:	f000 80a4 	beq.w	8002e60 <_printf_i+0x170>
 8002d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d20:	e03a      	b.n	8002d98 <_printf_i+0xa8>
 8002d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d26:	2b15      	cmp	r3, #21
 8002d28:	d8f6      	bhi.n	8002d18 <_printf_i+0x28>
 8002d2a:	a101      	add	r1, pc, #4	; (adr r1, 8002d30 <_printf_i+0x40>)
 8002d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d19 	.word	0x08002d19
 8002d3c:	08002d19 	.word	0x08002d19
 8002d40:	08002d19 	.word	0x08002d19
 8002d44:	08002d19 	.word	0x08002d19
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d19 	.word	0x08002d19
 8002d50:	08002d19 	.word	0x08002d19
 8002d54:	08002d19 	.word	0x08002d19
 8002d58:	08002d19 	.word	0x08002d19
 8002d5c:	08002eab 	.word	0x08002eab
 8002d60:	08002dcd 	.word	0x08002dcd
 8002d64:	08002e8d 	.word	0x08002e8d
 8002d68:	08002d19 	.word	0x08002d19
 8002d6c:	08002d19 	.word	0x08002d19
 8002d70:	08002ecd 	.word	0x08002ecd
 8002d74:	08002d19 	.word	0x08002d19
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002d19 	.word	0x08002d19
 8002d80:	08002d19 	.word	0x08002d19
 8002d84:	08002e95 	.word	0x08002e95
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	1d1a      	adds	r2, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	602a      	str	r2, [r5, #0]
 8002d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0a4      	b.n	8002ee6 <_printf_i+0x1f6>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	6829      	ldr	r1, [r5, #0]
 8002da0:	0606      	lsls	r6, r0, #24
 8002da2:	f101 0304 	add.w	r3, r1, #4
 8002da6:	d50a      	bpl.n	8002dbe <_printf_i+0xce>
 8002da8:	680e      	ldr	r6, [r1, #0]
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	da03      	bge.n	8002db8 <_printf_i+0xc8>
 8002db0:	232d      	movs	r3, #45	; 0x2d
 8002db2:	4276      	negs	r6, r6
 8002db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db8:	230a      	movs	r3, #10
 8002dba:	485e      	ldr	r0, [pc, #376]	; (8002f34 <_printf_i+0x244>)
 8002dbc:	e019      	b.n	8002df2 <_printf_i+0x102>
 8002dbe:	680e      	ldr	r6, [r1, #0]
 8002dc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dc4:	602b      	str	r3, [r5, #0]
 8002dc6:	bf18      	it	ne
 8002dc8:	b236      	sxthne	r6, r6
 8002dca:	e7ef      	b.n	8002dac <_printf_i+0xbc>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	6820      	ldr	r0, [r4, #0]
 8002dd0:	1d19      	adds	r1, r3, #4
 8002dd2:	6029      	str	r1, [r5, #0]
 8002dd4:	0601      	lsls	r1, r0, #24
 8002dd6:	d501      	bpl.n	8002ddc <_printf_i+0xec>
 8002dd8:	681e      	ldr	r6, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <_printf_i+0xf2>
 8002ddc:	0646      	lsls	r6, r0, #25
 8002dde:	d5fb      	bpl.n	8002dd8 <_printf_i+0xe8>
 8002de0:	881e      	ldrh	r6, [r3, #0]
 8002de2:	2f6f      	cmp	r7, #111	; 0x6f
 8002de4:	bf0c      	ite	eq
 8002de6:	2308      	moveq	r3, #8
 8002de8:	230a      	movne	r3, #10
 8002dea:	4852      	ldr	r0, [pc, #328]	; (8002f34 <_printf_i+0x244>)
 8002dec:	2100      	movs	r1, #0
 8002dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002df2:	6865      	ldr	r5, [r4, #4]
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	bfa8      	it	ge
 8002df8:	6821      	ldrge	r1, [r4, #0]
 8002dfa:	60a5      	str	r5, [r4, #8]
 8002dfc:	bfa4      	itt	ge
 8002dfe:	f021 0104 	bicge.w	r1, r1, #4
 8002e02:	6021      	strge	r1, [r4, #0]
 8002e04:	b90e      	cbnz	r6, 8002e0a <_printf_i+0x11a>
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	d04d      	beq.n	8002ea6 <_printf_i+0x1b6>
 8002e0a:	4615      	mov	r5, r2
 8002e0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e10:	fb03 6711 	mls	r7, r3, r1, r6
 8002e14:	5dc7      	ldrb	r7, [r0, r7]
 8002e16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e1a:	4637      	mov	r7, r6
 8002e1c:	42bb      	cmp	r3, r7
 8002e1e:	460e      	mov	r6, r1
 8002e20:	d9f4      	bls.n	8002e0c <_printf_i+0x11c>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10b      	bne.n	8002e3e <_printf_i+0x14e>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07de      	lsls	r6, r3, #31
 8002e2a:	d508      	bpl.n	8002e3e <_printf_i+0x14e>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	4299      	cmp	r1, r3
 8002e32:	bfde      	ittt	le
 8002e34:	2330      	movle	r3, #48	; 0x30
 8002e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e3e:	1b52      	subs	r2, r2, r5
 8002e40:	6122      	str	r2, [r4, #16]
 8002e42:	464b      	mov	r3, r9
 8002e44:	4621      	mov	r1, r4
 8002e46:	4640      	mov	r0, r8
 8002e48:	f8cd a000 	str.w	sl, [sp]
 8002e4c:	aa03      	add	r2, sp, #12
 8002e4e:	f7ff fedf 	bl	8002c10 <_printf_common>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d14c      	bne.n	8002ef0 <_printf_i+0x200>
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	4834      	ldr	r0, [pc, #208]	; (8002f34 <_printf_i+0x244>)
 8002e62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e66:	6829      	ldr	r1, [r5, #0]
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e6e:	6029      	str	r1, [r5, #0]
 8002e70:	061d      	lsls	r5, r3, #24
 8002e72:	d514      	bpl.n	8002e9e <_printf_i+0x1ae>
 8002e74:	07df      	lsls	r7, r3, #31
 8002e76:	bf44      	itt	mi
 8002e78:	f043 0320 	orrmi.w	r3, r3, #32
 8002e7c:	6023      	strmi	r3, [r4, #0]
 8002e7e:	b91e      	cbnz	r6, 8002e88 <_printf_i+0x198>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	f023 0320 	bic.w	r3, r3, #32
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	2310      	movs	r3, #16
 8002e8a:	e7af      	b.n	8002dec <_printf_i+0xfc>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	2378      	movs	r3, #120	; 0x78
 8002e96:	4828      	ldr	r0, [pc, #160]	; (8002f38 <_printf_i+0x248>)
 8002e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e9c:	e7e3      	b.n	8002e66 <_printf_i+0x176>
 8002e9e:	0659      	lsls	r1, r3, #25
 8002ea0:	bf48      	it	mi
 8002ea2:	b2b6      	uxthmi	r6, r6
 8002ea4:	e7e6      	b.n	8002e74 <_printf_i+0x184>
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	e7bb      	b.n	8002e22 <_printf_i+0x132>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	6826      	ldr	r6, [r4, #0]
 8002eae:	1d18      	adds	r0, r3, #4
 8002eb0:	6961      	ldr	r1, [r4, #20]
 8002eb2:	6028      	str	r0, [r5, #0]
 8002eb4:	0635      	lsls	r5, r6, #24
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	d501      	bpl.n	8002ebe <_printf_i+0x1ce>
 8002eba:	6019      	str	r1, [r3, #0]
 8002ebc:	e002      	b.n	8002ec4 <_printf_i+0x1d4>
 8002ebe:	0670      	lsls	r0, r6, #25
 8002ec0:	d5fb      	bpl.n	8002eba <_printf_i+0x1ca>
 8002ec2:	8019      	strh	r1, [r3, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	e7ba      	b.n	8002e42 <_printf_i+0x152>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	1d1a      	adds	r2, r3, #4
 8002ed2:	602a      	str	r2, [r5, #0]
 8002ed4:	681d      	ldr	r5, [r3, #0]
 8002ed6:	6862      	ldr	r2, [r4, #4]
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 fb23 	bl	8003524 <memchr>
 8002ede:	b108      	cbz	r0, 8002ee4 <_printf_i+0x1f4>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	6060      	str	r0, [r4, #4]
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eee:	e7a8      	b.n	8002e42 <_printf_i+0x152>
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	47d0      	blx	sl
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0ab      	beq.n	8002e56 <_printf_i+0x166>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079b      	lsls	r3, r3, #30
 8002f02:	d413      	bmi.n	8002f2c <_printf_i+0x23c>
 8002f04:	68e0      	ldr	r0, [r4, #12]
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	bfb8      	it	lt
 8002f0c:	4618      	movlt	r0, r3
 8002f0e:	e7a4      	b.n	8002e5a <_printf_i+0x16a>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4632      	mov	r2, r6
 8002f14:	4649      	mov	r1, r9
 8002f16:	4640      	mov	r0, r8
 8002f18:	47d0      	blx	sl
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d09b      	beq.n	8002e56 <_printf_i+0x166>
 8002f1e:	3501      	adds	r5, #1
 8002f20:	68e3      	ldr	r3, [r4, #12]
 8002f22:	9903      	ldr	r1, [sp, #12]
 8002f24:	1a5b      	subs	r3, r3, r1
 8002f26:	42ab      	cmp	r3, r5
 8002f28:	dcf2      	bgt.n	8002f10 <_printf_i+0x220>
 8002f2a:	e7eb      	b.n	8002f04 <_printf_i+0x214>
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	f104 0619 	add.w	r6, r4, #25
 8002f32:	e7f5      	b.n	8002f20 <_printf_i+0x230>
 8002f34:	08003833 	.word	0x08003833
 8002f38:	08003844 	.word	0x08003844

08002f3c <_sbrk_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4d05      	ldr	r5, [pc, #20]	; (8002f58 <_sbrk_r+0x1c>)
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	f7fd fc92 	bl	8000870 <_sbrk>
 8002f4c:	1c43      	adds	r3, r0, #1
 8002f4e:	d102      	bne.n	8002f56 <_sbrk_r+0x1a>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	b103      	cbz	r3, 8002f56 <_sbrk_r+0x1a>
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	20000190 	.word	0x20000190

08002f5c <__swbuf_r>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	460e      	mov	r6, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	4605      	mov	r5, r0
 8002f64:	b118      	cbz	r0, 8002f6e <__swbuf_r+0x12>
 8002f66:	6983      	ldr	r3, [r0, #24]
 8002f68:	b90b      	cbnz	r3, 8002f6e <__swbuf_r+0x12>
 8002f6a:	f000 f9d5 	bl	8003318 <__sinit>
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <__swbuf_r+0x98>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d12b      	bne.n	8002fcc <__swbuf_r+0x70>
 8002f74:	686c      	ldr	r4, [r5, #4]
 8002f76:	69a3      	ldr	r3, [r4, #24]
 8002f78:	60a3      	str	r3, [r4, #8]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	071a      	lsls	r2, r3, #28
 8002f7e:	d52f      	bpl.n	8002fe0 <__swbuf_r+0x84>
 8002f80:	6923      	ldr	r3, [r4, #16]
 8002f82:	b36b      	cbz	r3, 8002fe0 <__swbuf_r+0x84>
 8002f84:	6923      	ldr	r3, [r4, #16]
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	b2f6      	uxtb	r6, r6
 8002f8a:	1ac0      	subs	r0, r0, r3
 8002f8c:	6963      	ldr	r3, [r4, #20]
 8002f8e:	4637      	mov	r7, r6
 8002f90:	4283      	cmp	r3, r0
 8002f92:	dc04      	bgt.n	8002f9e <__swbuf_r+0x42>
 8002f94:	4621      	mov	r1, r4
 8002f96:	4628      	mov	r0, r5
 8002f98:	f000 f92a 	bl	80031f0 <_fflush_r>
 8002f9c:	bb30      	cbnz	r0, 8002fec <__swbuf_r+0x90>
 8002f9e:	68a3      	ldr	r3, [r4, #8]
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	60a3      	str	r3, [r4, #8]
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	6022      	str	r2, [r4, #0]
 8002fac:	701e      	strb	r6, [r3, #0]
 8002fae:	6963      	ldr	r3, [r4, #20]
 8002fb0:	4283      	cmp	r3, r0
 8002fb2:	d004      	beq.n	8002fbe <__swbuf_r+0x62>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	07db      	lsls	r3, r3, #31
 8002fb8:	d506      	bpl.n	8002fc8 <__swbuf_r+0x6c>
 8002fba:	2e0a      	cmp	r6, #10
 8002fbc:	d104      	bne.n	8002fc8 <__swbuf_r+0x6c>
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 f915 	bl	80031f0 <_fflush_r>
 8002fc6:	b988      	cbnz	r0, 8002fec <__swbuf_r+0x90>
 8002fc8:	4638      	mov	r0, r7
 8002fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <__swbuf_r+0x9c>)
 8002fce:	429c      	cmp	r4, r3
 8002fd0:	d101      	bne.n	8002fd6 <__swbuf_r+0x7a>
 8002fd2:	68ac      	ldr	r4, [r5, #8]
 8002fd4:	e7cf      	b.n	8002f76 <__swbuf_r+0x1a>
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <__swbuf_r+0xa0>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	bf08      	it	eq
 8002fdc:	68ec      	ldreq	r4, [r5, #12]
 8002fde:	e7ca      	b.n	8002f76 <__swbuf_r+0x1a>
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 f80c 	bl	8003000 <__swsetup_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d0cb      	beq.n	8002f84 <__swbuf_r+0x28>
 8002fec:	f04f 37ff 	mov.w	r7, #4294967295
 8002ff0:	e7ea      	b.n	8002fc8 <__swbuf_r+0x6c>
 8002ff2:	bf00      	nop
 8002ff4:	08003878 	.word	0x08003878
 8002ff8:	08003898 	.word	0x08003898
 8002ffc:	08003858 	.word	0x08003858

08003000 <__swsetup_r>:
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <__swsetup_r+0xcc>)
 8003002:	b570      	push	{r4, r5, r6, lr}
 8003004:	681d      	ldr	r5, [r3, #0]
 8003006:	4606      	mov	r6, r0
 8003008:	460c      	mov	r4, r1
 800300a:	b125      	cbz	r5, 8003016 <__swsetup_r+0x16>
 800300c:	69ab      	ldr	r3, [r5, #24]
 800300e:	b913      	cbnz	r3, 8003016 <__swsetup_r+0x16>
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f981 	bl	8003318 <__sinit>
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <__swsetup_r+0xd0>)
 8003018:	429c      	cmp	r4, r3
 800301a:	d10f      	bne.n	800303c <__swsetup_r+0x3c>
 800301c:	686c      	ldr	r4, [r5, #4]
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003024:	0719      	lsls	r1, r3, #28
 8003026:	d42c      	bmi.n	8003082 <__swsetup_r+0x82>
 8003028:	06dd      	lsls	r5, r3, #27
 800302a:	d411      	bmi.n	8003050 <__swsetup_r+0x50>
 800302c:	2309      	movs	r3, #9
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	e03e      	b.n	80030ba <__swsetup_r+0xba>
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <__swsetup_r+0xd4>)
 800303e:	429c      	cmp	r4, r3
 8003040:	d101      	bne.n	8003046 <__swsetup_r+0x46>
 8003042:	68ac      	ldr	r4, [r5, #8]
 8003044:	e7eb      	b.n	800301e <__swsetup_r+0x1e>
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <__swsetup_r+0xd8>)
 8003048:	429c      	cmp	r4, r3
 800304a:	bf08      	it	eq
 800304c:	68ec      	ldreq	r4, [r5, #12]
 800304e:	e7e6      	b.n	800301e <__swsetup_r+0x1e>
 8003050:	0758      	lsls	r0, r3, #29
 8003052:	d512      	bpl.n	800307a <__swsetup_r+0x7a>
 8003054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003056:	b141      	cbz	r1, 800306a <__swsetup_r+0x6a>
 8003058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800305c:	4299      	cmp	r1, r3
 800305e:	d002      	beq.n	8003066 <__swsetup_r+0x66>
 8003060:	4630      	mov	r0, r6
 8003062:	f7ff fba1 	bl	80027a8 <_free_r>
 8003066:	2300      	movs	r3, #0
 8003068:	6363      	str	r3, [r4, #52]	; 0x34
 800306a:	89a3      	ldrh	r3, [r4, #12]
 800306c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003070:	81a3      	strh	r3, [r4, #12]
 8003072:	2300      	movs	r3, #0
 8003074:	6063      	str	r3, [r4, #4]
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	81a3      	strh	r3, [r4, #12]
 8003082:	6923      	ldr	r3, [r4, #16]
 8003084:	b94b      	cbnz	r3, 800309a <__swsetup_r+0x9a>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800308c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003090:	d003      	beq.n	800309a <__swsetup_r+0x9a>
 8003092:	4621      	mov	r1, r4
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fa05 	bl	80034a4 <__smakebuf_r>
 800309a:	89a0      	ldrh	r0, [r4, #12]
 800309c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030a0:	f010 0301 	ands.w	r3, r0, #1
 80030a4:	d00a      	beq.n	80030bc <__swsetup_r+0xbc>
 80030a6:	2300      	movs	r3, #0
 80030a8:	60a3      	str	r3, [r4, #8]
 80030aa:	6963      	ldr	r3, [r4, #20]
 80030ac:	425b      	negs	r3, r3
 80030ae:	61a3      	str	r3, [r4, #24]
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b943      	cbnz	r3, 80030c6 <__swsetup_r+0xc6>
 80030b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030b8:	d1ba      	bne.n	8003030 <__swsetup_r+0x30>
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
 80030bc:	0781      	lsls	r1, r0, #30
 80030be:	bf58      	it	pl
 80030c0:	6963      	ldrpl	r3, [r4, #20]
 80030c2:	60a3      	str	r3, [r4, #8]
 80030c4:	e7f4      	b.n	80030b0 <__swsetup_r+0xb0>
 80030c6:	2000      	movs	r0, #0
 80030c8:	e7f7      	b.n	80030ba <__swsetup_r+0xba>
 80030ca:	bf00      	nop
 80030cc:	2000000c 	.word	0x2000000c
 80030d0:	08003878 	.word	0x08003878
 80030d4:	08003898 	.word	0x08003898
 80030d8:	08003858 	.word	0x08003858

080030dc <abort>:
 80030dc:	2006      	movs	r0, #6
 80030de:	b508      	push	{r3, lr}
 80030e0:	f000 fa62 	bl	80035a8 <raise>
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fd fb50 	bl	800078a <_exit>
	...

080030ec <__sflush_r>:
 80030ec:	898a      	ldrh	r2, [r1, #12]
 80030ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f0:	4605      	mov	r5, r0
 80030f2:	0710      	lsls	r0, r2, #28
 80030f4:	460c      	mov	r4, r1
 80030f6:	d457      	bmi.n	80031a8 <__sflush_r+0xbc>
 80030f8:	684b      	ldr	r3, [r1, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	dc04      	bgt.n	8003108 <__sflush_r+0x1c>
 80030fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	dc01      	bgt.n	8003108 <__sflush_r+0x1c>
 8003104:	2000      	movs	r0, #0
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800310a:	2e00      	cmp	r6, #0
 800310c:	d0fa      	beq.n	8003104 <__sflush_r+0x18>
 800310e:	2300      	movs	r3, #0
 8003110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003114:	682f      	ldr	r7, [r5, #0]
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	d032      	beq.n	8003180 <__sflush_r+0x94>
 800311a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	075a      	lsls	r2, r3, #29
 8003120:	d505      	bpl.n	800312e <__sflush_r+0x42>
 8003122:	6863      	ldr	r3, [r4, #4]
 8003124:	1ac0      	subs	r0, r0, r3
 8003126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003128:	b10b      	cbz	r3, 800312e <__sflush_r+0x42>
 800312a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800312c:	1ac0      	subs	r0, r0, r3
 800312e:	2300      	movs	r3, #0
 8003130:	4602      	mov	r2, r0
 8003132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003134:	4628      	mov	r0, r5
 8003136:	6a21      	ldr	r1, [r4, #32]
 8003138:	47b0      	blx	r6
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	d106      	bne.n	800314e <__sflush_r+0x62>
 8003140:	6829      	ldr	r1, [r5, #0]
 8003142:	291d      	cmp	r1, #29
 8003144:	d82c      	bhi.n	80031a0 <__sflush_r+0xb4>
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <__sflush_r+0x100>)
 8003148:	40ca      	lsrs	r2, r1
 800314a:	07d6      	lsls	r6, r2, #31
 800314c:	d528      	bpl.n	80031a0 <__sflush_r+0xb4>
 800314e:	2200      	movs	r2, #0
 8003150:	6062      	str	r2, [r4, #4]
 8003152:	6922      	ldr	r2, [r4, #16]
 8003154:	04d9      	lsls	r1, r3, #19
 8003156:	6022      	str	r2, [r4, #0]
 8003158:	d504      	bpl.n	8003164 <__sflush_r+0x78>
 800315a:	1c42      	adds	r2, r0, #1
 800315c:	d101      	bne.n	8003162 <__sflush_r+0x76>
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	b903      	cbnz	r3, 8003164 <__sflush_r+0x78>
 8003162:	6560      	str	r0, [r4, #84]	; 0x54
 8003164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003166:	602f      	str	r7, [r5, #0]
 8003168:	2900      	cmp	r1, #0
 800316a:	d0cb      	beq.n	8003104 <__sflush_r+0x18>
 800316c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003170:	4299      	cmp	r1, r3
 8003172:	d002      	beq.n	800317a <__sflush_r+0x8e>
 8003174:	4628      	mov	r0, r5
 8003176:	f7ff fb17 	bl	80027a8 <_free_r>
 800317a:	2000      	movs	r0, #0
 800317c:	6360      	str	r0, [r4, #52]	; 0x34
 800317e:	e7c2      	b.n	8003106 <__sflush_r+0x1a>
 8003180:	6a21      	ldr	r1, [r4, #32]
 8003182:	2301      	movs	r3, #1
 8003184:	4628      	mov	r0, r5
 8003186:	47b0      	blx	r6
 8003188:	1c41      	adds	r1, r0, #1
 800318a:	d1c7      	bne.n	800311c <__sflush_r+0x30>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0c4      	beq.n	800311c <__sflush_r+0x30>
 8003192:	2b1d      	cmp	r3, #29
 8003194:	d001      	beq.n	800319a <__sflush_r+0xae>
 8003196:	2b16      	cmp	r3, #22
 8003198:	d101      	bne.n	800319e <__sflush_r+0xb2>
 800319a:	602f      	str	r7, [r5, #0]
 800319c:	e7b2      	b.n	8003104 <__sflush_r+0x18>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	e7ae      	b.n	8003106 <__sflush_r+0x1a>
 80031a8:	690f      	ldr	r7, [r1, #16]
 80031aa:	2f00      	cmp	r7, #0
 80031ac:	d0aa      	beq.n	8003104 <__sflush_r+0x18>
 80031ae:	0793      	lsls	r3, r2, #30
 80031b0:	bf18      	it	ne
 80031b2:	2300      	movne	r3, #0
 80031b4:	680e      	ldr	r6, [r1, #0]
 80031b6:	bf08      	it	eq
 80031b8:	694b      	ldreq	r3, [r1, #20]
 80031ba:	1bf6      	subs	r6, r6, r7
 80031bc:	600f      	str	r7, [r1, #0]
 80031be:	608b      	str	r3, [r1, #8]
 80031c0:	2e00      	cmp	r6, #0
 80031c2:	dd9f      	ble.n	8003104 <__sflush_r+0x18>
 80031c4:	4633      	mov	r3, r6
 80031c6:	463a      	mov	r2, r7
 80031c8:	4628      	mov	r0, r5
 80031ca:	6a21      	ldr	r1, [r4, #32]
 80031cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80031d0:	47e0      	blx	ip
 80031d2:	2800      	cmp	r0, #0
 80031d4:	dc06      	bgt.n	80031e4 <__sflush_r+0xf8>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	e790      	b.n	8003106 <__sflush_r+0x1a>
 80031e4:	4407      	add	r7, r0
 80031e6:	1a36      	subs	r6, r6, r0
 80031e8:	e7ea      	b.n	80031c0 <__sflush_r+0xd4>
 80031ea:	bf00      	nop
 80031ec:	20400001 	.word	0x20400001

080031f0 <_fflush_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	690b      	ldr	r3, [r1, #16]
 80031f4:	4605      	mov	r5, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	b913      	cbnz	r3, 8003200 <_fflush_r+0x10>
 80031fa:	2500      	movs	r5, #0
 80031fc:	4628      	mov	r0, r5
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
 8003200:	b118      	cbz	r0, 800320a <_fflush_r+0x1a>
 8003202:	6983      	ldr	r3, [r0, #24]
 8003204:	b90b      	cbnz	r3, 800320a <_fflush_r+0x1a>
 8003206:	f000 f887 	bl	8003318 <__sinit>
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <_fflush_r+0x6c>)
 800320c:	429c      	cmp	r4, r3
 800320e:	d11b      	bne.n	8003248 <_fflush_r+0x58>
 8003210:	686c      	ldr	r4, [r5, #4]
 8003212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ef      	beq.n	80031fa <_fflush_r+0xa>
 800321a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800321c:	07d0      	lsls	r0, r2, #31
 800321e:	d404      	bmi.n	800322a <_fflush_r+0x3a>
 8003220:	0599      	lsls	r1, r3, #22
 8003222:	d402      	bmi.n	800322a <_fflush_r+0x3a>
 8003224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003226:	f000 f915 	bl	8003454 <__retarget_lock_acquire_recursive>
 800322a:	4628      	mov	r0, r5
 800322c:	4621      	mov	r1, r4
 800322e:	f7ff ff5d 	bl	80030ec <__sflush_r>
 8003232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003234:	4605      	mov	r5, r0
 8003236:	07da      	lsls	r2, r3, #31
 8003238:	d4e0      	bmi.n	80031fc <_fflush_r+0xc>
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	059b      	lsls	r3, r3, #22
 800323e:	d4dd      	bmi.n	80031fc <_fflush_r+0xc>
 8003240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003242:	f000 f908 	bl	8003456 <__retarget_lock_release_recursive>
 8003246:	e7d9      	b.n	80031fc <_fflush_r+0xc>
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <_fflush_r+0x70>)
 800324a:	429c      	cmp	r4, r3
 800324c:	d101      	bne.n	8003252 <_fflush_r+0x62>
 800324e:	68ac      	ldr	r4, [r5, #8]
 8003250:	e7df      	b.n	8003212 <_fflush_r+0x22>
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <_fflush_r+0x74>)
 8003254:	429c      	cmp	r4, r3
 8003256:	bf08      	it	eq
 8003258:	68ec      	ldreq	r4, [r5, #12]
 800325a:	e7da      	b.n	8003212 <_fflush_r+0x22>
 800325c:	08003878 	.word	0x08003878
 8003260:	08003898 	.word	0x08003898
 8003264:	08003858 	.word	0x08003858

08003268 <std>:
 8003268:	2300      	movs	r3, #0
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	e9c0 3300 	strd	r3, r3, [r0]
 8003272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003276:	6083      	str	r3, [r0, #8]
 8003278:	8181      	strh	r1, [r0, #12]
 800327a:	6643      	str	r3, [r0, #100]	; 0x64
 800327c:	81c2      	strh	r2, [r0, #14]
 800327e:	6183      	str	r3, [r0, #24]
 8003280:	4619      	mov	r1, r3
 8003282:	2208      	movs	r2, #8
 8003284:	305c      	adds	r0, #92	; 0x5c
 8003286:	f7ff fa11 	bl	80026ac <memset>
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <std+0x38>)
 800328c:	6224      	str	r4, [r4, #32]
 800328e:	6263      	str	r3, [r4, #36]	; 0x24
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <std+0x3c>)
 8003292:	62a3      	str	r3, [r4, #40]	; 0x28
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <std+0x40>)
 8003296:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <std+0x44>)
 800329a:	6323      	str	r3, [r4, #48]	; 0x30
 800329c:	bd10      	pop	{r4, pc}
 800329e:	bf00      	nop
 80032a0:	080035e1 	.word	0x080035e1
 80032a4:	08003603 	.word	0x08003603
 80032a8:	0800363b 	.word	0x0800363b
 80032ac:	0800365f 	.word	0x0800365f

080032b0 <_cleanup_r>:
 80032b0:	4901      	ldr	r1, [pc, #4]	; (80032b8 <_cleanup_r+0x8>)
 80032b2:	f000 b8af 	b.w	8003414 <_fwalk_reent>
 80032b6:	bf00      	nop
 80032b8:	080031f1 	.word	0x080031f1

080032bc <__sfmoreglue>:
 80032bc:	2268      	movs	r2, #104	; 0x68
 80032be:	b570      	push	{r4, r5, r6, lr}
 80032c0:	1e4d      	subs	r5, r1, #1
 80032c2:	4355      	muls	r5, r2
 80032c4:	460e      	mov	r6, r1
 80032c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032ca:	f7ff fad5 	bl	8002878 <_malloc_r>
 80032ce:	4604      	mov	r4, r0
 80032d0:	b140      	cbz	r0, 80032e4 <__sfmoreglue+0x28>
 80032d2:	2100      	movs	r1, #0
 80032d4:	e9c0 1600 	strd	r1, r6, [r0]
 80032d8:	300c      	adds	r0, #12
 80032da:	60a0      	str	r0, [r4, #8]
 80032dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032e0:	f7ff f9e4 	bl	80026ac <memset>
 80032e4:	4620      	mov	r0, r4
 80032e6:	bd70      	pop	{r4, r5, r6, pc}

080032e8 <__sfp_lock_acquire>:
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <__sfp_lock_acquire+0x8>)
 80032ea:	f000 b8b3 	b.w	8003454 <__retarget_lock_acquire_recursive>
 80032ee:	bf00      	nop
 80032f0:	2000018d 	.word	0x2000018d

080032f4 <__sfp_lock_release>:
 80032f4:	4801      	ldr	r0, [pc, #4]	; (80032fc <__sfp_lock_release+0x8>)
 80032f6:	f000 b8ae 	b.w	8003456 <__retarget_lock_release_recursive>
 80032fa:	bf00      	nop
 80032fc:	2000018d 	.word	0x2000018d

08003300 <__sinit_lock_acquire>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__sinit_lock_acquire+0x8>)
 8003302:	f000 b8a7 	b.w	8003454 <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	2000018e 	.word	0x2000018e

0800330c <__sinit_lock_release>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__sinit_lock_release+0x8>)
 800330e:	f000 b8a2 	b.w	8003456 <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	2000018e 	.word	0x2000018e

08003318 <__sinit>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	f7ff fff0 	bl	8003300 <__sinit_lock_acquire>
 8003320:	69a3      	ldr	r3, [r4, #24]
 8003322:	b11b      	cbz	r3, 800332c <__sinit+0x14>
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	f7ff bff0 	b.w	800330c <__sinit_lock_release>
 800332c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003330:	6523      	str	r3, [r4, #80]	; 0x50
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <__sinit+0x68>)
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <__sinit+0x6c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	62a2      	str	r2, [r4, #40]	; 0x28
 800333a:	42a3      	cmp	r3, r4
 800333c:	bf08      	it	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	4620      	mov	r0, r4
 8003342:	bf08      	it	eq
 8003344:	61a3      	streq	r3, [r4, #24]
 8003346:	f000 f81f 	bl	8003388 <__sfp>
 800334a:	6060      	str	r0, [r4, #4]
 800334c:	4620      	mov	r0, r4
 800334e:	f000 f81b 	bl	8003388 <__sfp>
 8003352:	60a0      	str	r0, [r4, #8]
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f817 	bl	8003388 <__sfp>
 800335a:	2200      	movs	r2, #0
 800335c:	2104      	movs	r1, #4
 800335e:	60e0      	str	r0, [r4, #12]
 8003360:	6860      	ldr	r0, [r4, #4]
 8003362:	f7ff ff81 	bl	8003268 <std>
 8003366:	2201      	movs	r2, #1
 8003368:	2109      	movs	r1, #9
 800336a:	68a0      	ldr	r0, [r4, #8]
 800336c:	f7ff ff7c 	bl	8003268 <std>
 8003370:	2202      	movs	r2, #2
 8003372:	2112      	movs	r1, #18
 8003374:	68e0      	ldr	r0, [r4, #12]
 8003376:	f7ff ff77 	bl	8003268 <std>
 800337a:	2301      	movs	r3, #1
 800337c:	61a3      	str	r3, [r4, #24]
 800337e:	e7d1      	b.n	8003324 <__sinit+0xc>
 8003380:	08003770 	.word	0x08003770
 8003384:	080032b1 	.word	0x080032b1

08003388 <__sfp>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	4607      	mov	r7, r0
 800338c:	f7ff ffac 	bl	80032e8 <__sfp_lock_acquire>
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <__sfp+0x84>)
 8003392:	681e      	ldr	r6, [r3, #0]
 8003394:	69b3      	ldr	r3, [r6, #24]
 8003396:	b913      	cbnz	r3, 800339e <__sfp+0x16>
 8003398:	4630      	mov	r0, r6
 800339a:	f7ff ffbd 	bl	8003318 <__sinit>
 800339e:	3648      	adds	r6, #72	; 0x48
 80033a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	d503      	bpl.n	80033b0 <__sfp+0x28>
 80033a8:	6833      	ldr	r3, [r6, #0]
 80033aa:	b30b      	cbz	r3, 80033f0 <__sfp+0x68>
 80033ac:	6836      	ldr	r6, [r6, #0]
 80033ae:	e7f7      	b.n	80033a0 <__sfp+0x18>
 80033b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033b4:	b9d5      	cbnz	r5, 80033ec <__sfp+0x64>
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <__sfp+0x88>)
 80033b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033bc:	60e3      	str	r3, [r4, #12]
 80033be:	6665      	str	r5, [r4, #100]	; 0x64
 80033c0:	f000 f847 	bl	8003452 <__retarget_lock_init_recursive>
 80033c4:	f7ff ff96 	bl	80032f4 <__sfp_lock_release>
 80033c8:	2208      	movs	r2, #8
 80033ca:	4629      	mov	r1, r5
 80033cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033d4:	6025      	str	r5, [r4, #0]
 80033d6:	61a5      	str	r5, [r4, #24]
 80033d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033dc:	f7ff f966 	bl	80026ac <memset>
 80033e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033e8:	4620      	mov	r0, r4
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	3468      	adds	r4, #104	; 0x68
 80033ee:	e7d9      	b.n	80033a4 <__sfp+0x1c>
 80033f0:	2104      	movs	r1, #4
 80033f2:	4638      	mov	r0, r7
 80033f4:	f7ff ff62 	bl	80032bc <__sfmoreglue>
 80033f8:	4604      	mov	r4, r0
 80033fa:	6030      	str	r0, [r6, #0]
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d1d5      	bne.n	80033ac <__sfp+0x24>
 8003400:	f7ff ff78 	bl	80032f4 <__sfp_lock_release>
 8003404:	230c      	movs	r3, #12
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	e7ee      	b.n	80033e8 <__sfp+0x60>
 800340a:	bf00      	nop
 800340c:	08003770 	.word	0x08003770
 8003410:	ffff0001 	.word	0xffff0001

08003414 <_fwalk_reent>:
 8003414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003418:	4606      	mov	r6, r0
 800341a:	4688      	mov	r8, r1
 800341c:	2700      	movs	r7, #0
 800341e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003426:	f1b9 0901 	subs.w	r9, r9, #1
 800342a:	d505      	bpl.n	8003438 <_fwalk_reent+0x24>
 800342c:	6824      	ldr	r4, [r4, #0]
 800342e:	2c00      	cmp	r4, #0
 8003430:	d1f7      	bne.n	8003422 <_fwalk_reent+0xe>
 8003432:	4638      	mov	r0, r7
 8003434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003438:	89ab      	ldrh	r3, [r5, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d907      	bls.n	800344e <_fwalk_reent+0x3a>
 800343e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003442:	3301      	adds	r3, #1
 8003444:	d003      	beq.n	800344e <_fwalk_reent+0x3a>
 8003446:	4629      	mov	r1, r5
 8003448:	4630      	mov	r0, r6
 800344a:	47c0      	blx	r8
 800344c:	4307      	orrs	r7, r0
 800344e:	3568      	adds	r5, #104	; 0x68
 8003450:	e7e9      	b.n	8003426 <_fwalk_reent+0x12>

08003452 <__retarget_lock_init_recursive>:
 8003452:	4770      	bx	lr

08003454 <__retarget_lock_acquire_recursive>:
 8003454:	4770      	bx	lr

08003456 <__retarget_lock_release_recursive>:
 8003456:	4770      	bx	lr

08003458 <__swhatbuf_r>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	460e      	mov	r6, r1
 800345c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003460:	4614      	mov	r4, r2
 8003462:	2900      	cmp	r1, #0
 8003464:	461d      	mov	r5, r3
 8003466:	b096      	sub	sp, #88	; 0x58
 8003468:	da08      	bge.n	800347c <__swhatbuf_r+0x24>
 800346a:	2200      	movs	r2, #0
 800346c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003470:	602a      	str	r2, [r5, #0]
 8003472:	061a      	lsls	r2, r3, #24
 8003474:	d410      	bmi.n	8003498 <__swhatbuf_r+0x40>
 8003476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347a:	e00e      	b.n	800349a <__swhatbuf_r+0x42>
 800347c:	466a      	mov	r2, sp
 800347e:	f000 f915 	bl	80036ac <_fstat_r>
 8003482:	2800      	cmp	r0, #0
 8003484:	dbf1      	blt.n	800346a <__swhatbuf_r+0x12>
 8003486:	9a01      	ldr	r2, [sp, #4]
 8003488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800348c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003490:	425a      	negs	r2, r3
 8003492:	415a      	adcs	r2, r3
 8003494:	602a      	str	r2, [r5, #0]
 8003496:	e7ee      	b.n	8003476 <__swhatbuf_r+0x1e>
 8003498:	2340      	movs	r3, #64	; 0x40
 800349a:	2000      	movs	r0, #0
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	b016      	add	sp, #88	; 0x58
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080034a4 <__smakebuf_r>:
 80034a4:	898b      	ldrh	r3, [r1, #12]
 80034a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034a8:	079d      	lsls	r5, r3, #30
 80034aa:	4606      	mov	r6, r0
 80034ac:	460c      	mov	r4, r1
 80034ae:	d507      	bpl.n	80034c0 <__smakebuf_r+0x1c>
 80034b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	2301      	movs	r3, #1
 80034ba:	6163      	str	r3, [r4, #20]
 80034bc:	b002      	add	sp, #8
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	466a      	mov	r2, sp
 80034c2:	ab01      	add	r3, sp, #4
 80034c4:	f7ff ffc8 	bl	8003458 <__swhatbuf_r>
 80034c8:	9900      	ldr	r1, [sp, #0]
 80034ca:	4605      	mov	r5, r0
 80034cc:	4630      	mov	r0, r6
 80034ce:	f7ff f9d3 	bl	8002878 <_malloc_r>
 80034d2:	b948      	cbnz	r0, 80034e8 <__smakebuf_r+0x44>
 80034d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034d8:	059a      	lsls	r2, r3, #22
 80034da:	d4ef      	bmi.n	80034bc <__smakebuf_r+0x18>
 80034dc:	f023 0303 	bic.w	r3, r3, #3
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	e7e3      	b.n	80034b0 <__smakebuf_r+0xc>
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <__smakebuf_r+0x7c>)
 80034ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	6020      	str	r0, [r4, #0]
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	9b00      	ldr	r3, [sp, #0]
 80034f8:	6120      	str	r0, [r4, #16]
 80034fa:	6163      	str	r3, [r4, #20]
 80034fc:	9b01      	ldr	r3, [sp, #4]
 80034fe:	b15b      	cbz	r3, 8003518 <__smakebuf_r+0x74>
 8003500:	4630      	mov	r0, r6
 8003502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003506:	f000 f8e3 	bl	80036d0 <_isatty_r>
 800350a:	b128      	cbz	r0, 8003518 <__smakebuf_r+0x74>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	81a3      	strh	r3, [r4, #12]
 8003518:	89a0      	ldrh	r0, [r4, #12]
 800351a:	4305      	orrs	r5, r0
 800351c:	81a5      	strh	r5, [r4, #12]
 800351e:	e7cd      	b.n	80034bc <__smakebuf_r+0x18>
 8003520:	080032b1 	.word	0x080032b1

08003524 <memchr>:
 8003524:	4603      	mov	r3, r0
 8003526:	b510      	push	{r4, lr}
 8003528:	b2c9      	uxtb	r1, r1
 800352a:	4402      	add	r2, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	4618      	mov	r0, r3
 8003530:	d101      	bne.n	8003536 <memchr+0x12>
 8003532:	2000      	movs	r0, #0
 8003534:	e003      	b.n	800353e <memchr+0x1a>
 8003536:	7804      	ldrb	r4, [r0, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	428c      	cmp	r4, r1
 800353c:	d1f6      	bne.n	800352c <memchr+0x8>
 800353e:	bd10      	pop	{r4, pc}

08003540 <__malloc_lock>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__malloc_lock+0x8>)
 8003542:	f7ff bf87 	b.w	8003454 <__retarget_lock_acquire_recursive>
 8003546:	bf00      	nop
 8003548:	2000018c 	.word	0x2000018c

0800354c <__malloc_unlock>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__malloc_unlock+0x8>)
 800354e:	f7ff bf82 	b.w	8003456 <__retarget_lock_release_recursive>
 8003552:	bf00      	nop
 8003554:	2000018c 	.word	0x2000018c

08003558 <_raise_r>:
 8003558:	291f      	cmp	r1, #31
 800355a:	b538      	push	{r3, r4, r5, lr}
 800355c:	4604      	mov	r4, r0
 800355e:	460d      	mov	r5, r1
 8003560:	d904      	bls.n	800356c <_raise_r+0x14>
 8003562:	2316      	movs	r3, #22
 8003564:	6003      	str	r3, [r0, #0]
 8003566:	f04f 30ff 	mov.w	r0, #4294967295
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800356e:	b112      	cbz	r2, 8003576 <_raise_r+0x1e>
 8003570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003574:	b94b      	cbnz	r3, 800358a <_raise_r+0x32>
 8003576:	4620      	mov	r0, r4
 8003578:	f000 f830 	bl	80035dc <_getpid_r>
 800357c:	462a      	mov	r2, r5
 800357e:	4601      	mov	r1, r0
 8003580:	4620      	mov	r0, r4
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 b817 	b.w	80035b8 <_kill_r>
 800358a:	2b01      	cmp	r3, #1
 800358c:	d00a      	beq.n	80035a4 <_raise_r+0x4c>
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	d103      	bne.n	800359a <_raise_r+0x42>
 8003592:	2316      	movs	r3, #22
 8003594:	6003      	str	r3, [r0, #0]
 8003596:	2001      	movs	r0, #1
 8003598:	e7e7      	b.n	800356a <_raise_r+0x12>
 800359a:	2400      	movs	r4, #0
 800359c:	4628      	mov	r0, r5
 800359e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80035a2:	4798      	blx	r3
 80035a4:	2000      	movs	r0, #0
 80035a6:	e7e0      	b.n	800356a <_raise_r+0x12>

080035a8 <raise>:
 80035a8:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <raise+0xc>)
 80035aa:	4601      	mov	r1, r0
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff bfd3 	b.w	8003558 <_raise_r>
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c

080035b8 <_kill_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	2300      	movs	r3, #0
 80035bc:	4d06      	ldr	r5, [pc, #24]	; (80035d8 <_kill_r+0x20>)
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	f7fd f8d0 	bl	800076a <_kill>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d102      	bne.n	80035d4 <_kill_r+0x1c>
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	b103      	cbz	r3, 80035d4 <_kill_r+0x1c>
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	bd38      	pop	{r3, r4, r5, pc}
 80035d6:	bf00      	nop
 80035d8:	20000190 	.word	0x20000190

080035dc <_getpid_r>:
 80035dc:	f7fd b8be 	b.w	800075c <_getpid>

080035e0 <__sread>:
 80035e0:	b510      	push	{r4, lr}
 80035e2:	460c      	mov	r4, r1
 80035e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e8:	f000 f894 	bl	8003714 <_read_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	bfab      	itete	ge
 80035f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035f2:	89a3      	ldrhlt	r3, [r4, #12]
 80035f4:	181b      	addge	r3, r3, r0
 80035f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035fa:	bfac      	ite	ge
 80035fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80035fe:	81a3      	strhlt	r3, [r4, #12]
 8003600:	bd10      	pop	{r4, pc}

08003602 <__swrite>:
 8003602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003606:	461f      	mov	r7, r3
 8003608:	898b      	ldrh	r3, [r1, #12]
 800360a:	4605      	mov	r5, r0
 800360c:	05db      	lsls	r3, r3, #23
 800360e:	460c      	mov	r4, r1
 8003610:	4616      	mov	r6, r2
 8003612:	d505      	bpl.n	8003620 <__swrite+0x1e>
 8003614:	2302      	movs	r3, #2
 8003616:	2200      	movs	r2, #0
 8003618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361c:	f000 f868 	bl	80036f0 <_lseek_r>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	4632      	mov	r2, r6
 8003624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	4628      	mov	r0, r5
 800362c:	463b      	mov	r3, r7
 800362e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003636:	f000 b817 	b.w	8003668 <_write_r>

0800363a <__sseek>:
 800363a:	b510      	push	{r4, lr}
 800363c:	460c      	mov	r4, r1
 800363e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003642:	f000 f855 	bl	80036f0 <_lseek_r>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	bf15      	itete	ne
 800364c:	6560      	strne	r0, [r4, #84]	; 0x54
 800364e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003656:	81a3      	strheq	r3, [r4, #12]
 8003658:	bf18      	it	ne
 800365a:	81a3      	strhne	r3, [r4, #12]
 800365c:	bd10      	pop	{r4, pc}

0800365e <__sclose>:
 800365e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003662:	f000 b813 	b.w	800368c <_close_r>
	...

08003668 <_write_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4604      	mov	r4, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	2200      	movs	r2, #0
 8003672:	4d05      	ldr	r5, [pc, #20]	; (8003688 <_write_r+0x20>)
 8003674:	602a      	str	r2, [r5, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7fd f8ae 	bl	80007d8 <_write>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_write_r+0x1e>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_write_r+0x1e>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20000190 	.word	0x20000190

0800368c <_close_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	2300      	movs	r3, #0
 8003690:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_close_r+0x1c>)
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd f8ba 	bl	8000810 <_close>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_close_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_close_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000190 	.word	0x20000190

080036ac <_fstat_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	2300      	movs	r3, #0
 80036b0:	4d06      	ldr	r5, [pc, #24]	; (80036cc <_fstat_r+0x20>)
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	f7fd f8b4 	bl	8000826 <_fstat>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d102      	bne.n	80036c8 <_fstat_r+0x1c>
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	b103      	cbz	r3, 80036c8 <_fstat_r+0x1c>
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	bd38      	pop	{r3, r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	20000190 	.word	0x20000190

080036d0 <_isatty_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	2300      	movs	r3, #0
 80036d4:	4d05      	ldr	r5, [pc, #20]	; (80036ec <_isatty_r+0x1c>)
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fd f8b2 	bl	8000844 <_isatty>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d102      	bne.n	80036ea <_isatty_r+0x1a>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	b103      	cbz	r3, 80036ea <_isatty_r+0x1a>
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	20000190 	.word	0x20000190

080036f0 <_lseek_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	2200      	movs	r2, #0
 80036fa:	4d05      	ldr	r5, [pc, #20]	; (8003710 <_lseek_r+0x20>)
 80036fc:	602a      	str	r2, [r5, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7fd f8aa 	bl	8000858 <_lseek>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d102      	bne.n	800370e <_lseek_r+0x1e>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	b103      	cbz	r3, 800370e <_lseek_r+0x1e>
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	20000190 	.word	0x20000190

08003714 <_read_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	2200      	movs	r2, #0
 800371e:	4d05      	ldr	r5, [pc, #20]	; (8003734 <_read_r+0x20>)
 8003720:	602a      	str	r2, [r5, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f7fd f83b 	bl	800079e <_read>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_read_r+0x1e>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_read_r+0x1e>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	20000190 	.word	0x20000190

08003738 <_init>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	bf00      	nop
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr

08003744 <_fini>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr
